{"id": "s26543", "deepquery_id": "768a9e38817911f087c64c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk485-popq-assessment\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk485-observation-cs\"\n        self.main_code = \"popq-grade\"\n        self.main_code_display = \"POP-Q\u5206\u5ea6\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u76c6\u8154\u5668\u5b98\u8131\u5782\", \"POP-Q\", \"\u8131\u5782\u5206\u5ea6\", \"\u9634\u9053\u8131\u5782\", \"\u5b50\u5bab\u8131\u5782\", \"\u8180\u80f1\u81a8\u51fa\", \"\u76f4\u80a0\u81a8\u51fa\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\u89c1\", \"\u672a\u63d0\u53ca\", \"\u6392\u9664\", \"\u975e\", \"\u4e0d\u662f\", \"\u672a\u8fbe\u5230\", \"\u672a\u6784\u6210\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u65e0\u660e\u663e\u8131\u5782\", \"\u672a\u89c1III-IV\u5ea6\u8131\u5782\", \"\u5426\u8ba4\u91cd\u5ea6\u8131\u5782\", \"\u975eIII\u5ea6\u53ca\u4ee5\u4e0a\", \"\u672a\u8fbe\u5230III\u5ea6\", \"\u672a\u6784\u6210\u91cd\u5ea6\u8131\u5782\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\u89c4\u5219\u6620\u5c04\u8868\n        self.field_extraction_rules = {\n            \"POP-Q\u5206\u5ea6\u7ed3\u679c\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d+\u6b63\u5219\u5339\u914d\",\n                \"keywords\": [\"I\u5ea6\", \"II\u5ea6\", \"III\u5ea6\", \"IV\u5ea6\", \"1\u5ea6\", \"2\u5ea6\", \"3\u5ea6\", \"4\u5ea6\"],\n                \"patterns\": [\n                    r'POP-Q[\u5206\u5ea6\u4e3a]?([\u2160\u2161\u2162\u2163]|[1234])\u5ea6?',\n                    r'[\u2160\u2161\u2162\u2163]\u5ea6\u8131\u5782',\n                    r'\u7b2c[\u4e00\u4e8c\u4e09\u56db]\u5ea6\u8131\u5782'\n                ]\n            },\n            \"\u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d+\u5426\u5b9a\u903b\u8f91\",\n                \"positive_keywords\": [\"III\u5ea6\", \"IV\u5ea6\", \"3\u5ea6\", \"4\u5ea6\", \"\u91cd\u5ea6\u8131\u5782\", \"\u4e25\u91cd\u8131\u5782\"],\n                \"negative_keywords\": [\"\u975eIII\u5ea6\", \"\u975eIV\u5ea6\", \"\u4e0d\u662fIII\u5ea6\", \"\u4e0d\u662fIV\u5ea6\", \"\u8f7b\u5ea6\", \"\u4e2d\u5ea6\"]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u76c6\u8154\u5668\u5b98\u8131\u5782\u5206\u5ea6\uff08POP-Q\uff09\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"popq_grade\": None,           # POP-Q\u5206\u5ea6\u7ed3\u679c\uff08\u5982\"I\u5ea6\"\u3001\"III\u5ea6\"\u7b49\uff09\n            \"is_severe_prolapse\": None    # \u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\uff08True/False/None\uff09\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u76f8\u5173\u4e25\u91cd\u8131\u5782\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"is_severe_prolapse\"] = False\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\uff1a\u63d0\u53d6POP-Q\u5206\u5ea6\u7ed3\u679c\n        # \u4f7f\u7528\u5173\u952e\u8bcd\u5339\u914d\n        grade_keywords = [\"I\u5ea6\", \"II\u5ea6\", \"III\u5ea6\", \"IV\u5ea6\", \"1\u5ea6\", \"2\u5ea6\", \"3\u5ea6\", \"4\u5ea6\"]\n        for keyword in grade_keywords:\n            if keyword in text:\n                result[\"popq_grade\"] = keyword\n                break\n        # \u82e5\u672a\u901a\u8fc7\u5173\u952e\u8bcd\u5339\u914d\u5230\uff0c\u5219\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\n        if result[\"popq_grade\"] is None:\n            patterns = [\n                r'POP-Q[\u5206\u5ea6\u4e3a]?([\u2160\u2161\u2162\u2163]|[1234])\u5ea6?',\n                r'[\u2160\u2161\u2162\u2163]\u5ea6\u8131\u5782',\n                r'\u7b2c[\u4e00\u4e8c\u4e09\u56db]\u5ea6\u8131\u5782'\n            ]\n            for pattern in patterns:\n                match = re.search(pattern, text)\n                if match:\n                    raw_grade = match.group(1) if match.lastindex else match.group(0)\n                    # \u6807\u51c6\u5316\u4e3a\u4e2d\u6587\u8868\u8ff0\n                    grade_map = {\"\u2160\": \"I\", \"\u2161\": \"II\", \"\u2162\": \"III\", \"\u2163\": \"IV\"}\n                    if raw_grade in grade_map:\n                        result[\"popq_grade\"] = f\"{grade_map[raw_grade]}\u5ea6\"\n                    elif raw_grade in [\"1\", \"2\", \"3\", \"4\"]:\n                        result[\"popq_grade\"] = f\"{raw_grade}\u5ea6\"\n                    else:\n                        result[\"popq_grade\"] = raw_grade\n                    break\n\n        # 4. \u5224\u65ad\u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\n        if result[\"popq_grade\"] in [\"III\u5ea6\", \"IV\u5ea6\", \"3\u5ea6\", \"4\u5ea6\"]:\n            result[\"is_severe_prolapse\"] = True\n        else:\n            positive_keywords = [\"III\u5ea6\", \"IV\u5ea6\", \"3\u5ea6\", \"4\u5ea6\", \"\u91cd\u5ea6\u8131\u5782\", \"\u4e25\u91cd\u8131\u5782\"]\n            negative_keywords = [\"\u975eIII\u5ea6\", \"\u975eIV\u5ea6\", \"\u4e0d\u662fIII\u5ea6\", \"\u4e0d\u662fIV\u5ea6\", \"\u8f7b\u5ea6\", \"\u4e2d\u5ea6\"]\n            # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6b63\u5411\u5173\u952e\u8bcd\u4e14\u672a\u88ab\u5426\u5b9a\n            has_positive = any(kw in text for kw in positive_keywords)\n            has_negation_of_positive = any(kw in text for kw in negative_keywords)\n            if has_positive and not has_negation_of_positive:\n                result[\"is_severe_prolapse\"] = True\n            elif has_negation_of_positive:\n                result[\"is_severe_prolapse\"] = False\n            elif result[\"is_severe_prolapse\"] is None and result[\"popq_grade\"]:\n                # \u82e5\u5df2\u6709\u5206\u5ea6\u4f46\u672a\u660e\u786e\u63d0\u53ca\u4e25\u91cd\u7a0b\u5ea6\uff0c\u9ed8\u8ba4\u6839\u636e\u5206\u5ea6\u5224\u65ad\n                result[\"is_severe_prolapse\"] = result[\"popq_grade\"] in [\"III\u5ea6\", \"IV\u5ea6\", \"3\u5ea6\", \"4\u5ea6\"]\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408POP-Q\u8bc4\u4f30Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201cPOP-Q\u5206\u5ea6\u7ed3\u679c\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        if clinical_info.get(\"popq_grade\") is not None:\n            popq_grade_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"observation-cs\", \"component-cs\"),\n                            \"code\": \"popq-grade-result\",\n                            \"display\": \"POP-Q\u5206\u5ea6\u7ed3\u679c\"\n                        }\n                    ],\n                    \"text\": \"POP-Q\u5206\u5ea6\u7ed3\u679c\"\n                },\n                \"valueCodeableConcept\": {\n                    \"coding\": [\n                        {\n                            \"system\": f\"{self.main_code_system.replace('observation-cs', 'popq-grade-cs')}\",\n                            \"code\": clinical_info[\"popq_grade\"],\n                            \"display\": clinical_info[\"popq_grade\"]\n                        }\n                    ],\n                    \"text\": clinical_info[\"popq_grade\"]\n                }\n            }\n            observation[\"component\"].append(popq_grade_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        if clinical_info.get(\"is_severe_prolapse\") is not None:\n            severe_prolapse_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"observation-cs\", \"component-cs\"),\n                            \"code\": \"severe-prolapse-status\",\n                            \"display\": \"\u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\"\n                        }\n                    ],\n                    \"text\": \"\u662f\u5426\u4e3aIII-IV\u5ea6\u8131\u5782\"\n                }\n            }\n            if clinical_info[\"is_severe_prolapse\"]:\n                severe_prolapse_comp[\"valueCodeableConcept\"] = {\n                    \"coding\": [\n                        {\n                            \"system\": f\"{self.main_code_system.replace('observation-cs', 'severe-prolapse-cs')}\",\n                            \"code\": \"yes\",\n                            \"display\": \"\u662f\"\n                        }\n                    ],\n                    \"text\": \"\u662f\"\n                }\n            else:\n                severe_prolapse_comp[\"valueCodeableConcept\"] = {\n                    \"coding\": [\n                        {\n                            \"system\": f\"{self.main_code_system.replace('observation-cs', 'severe-prolapse-cs')}\",\n                            \"code\": \"no\",\n                            \"display\": \"\u5426\"\n                        }\n                    ],\n                    \"text\": \"\u5426\"\n                }\n            observation[\"component\"].append(severe_prolapse_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542bPOP-Q\u8bc4\u4f30Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08POP-Q\u76f8\u5173\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u4e24\u4e2a\u5173\u952e\u5b57\u6bb5\u90fd\u4e3a\u7a7a\u65f6\u89c6\u4e3a\u65e0\u6548\uff09\n            if clinical_info.get(\"popq_grade\") is None and clinical_info.get(\"is_severe_prolapse\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s4367", "deepquery_id": "708bb6f487fb11f0b1864c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk895-GenderObservationProfile\"\n        self.main_code_system = \"http://loinc.org\"\n        self.main_code = \"46098-0\"\n        self.main_code_display = \"Sex\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u6027\u522b\", \"\u7537\", \"\u5973\", \"\u7537\u6027\", \"\u5973\u6027\", \"\u7537\u5b69\", \"\u5973\u5b69\", \"\u7537\u5b50\", \"\u5973\u5b50\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = []  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = []  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # 3. \u6027\u522b\u5b57\u6bb5\u63d0\u53d6\u5173\u952e\u8bcd\u6620\u5c04\uff08\u7528\u4e8e\u6807\u51c6\u5316\u8f93\u51fa\uff09\n        self.gender_mapping = {\n            \"\u7537\": \"male\",\n            \"\u7537\u6027\": \"male\",\n            \"\u7537\u5b69\": \"male\",\n            \"\u7537\u5b50\": \"male\",\n            \"\u5973\": \"female\",\n            \"\u5973\u6027\": \"female\",\n            \"\u5973\u5b69\": \"female\",\n            \"\u5973\u5b50\": \"female\"\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u6027\u522b\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"gender\": None  # \u6807\u51c6\u5316\u6027\u522b\u503c\uff1amale/female/None\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u672c\u573a\u666f\u4e0b\u4e0d\u9002\u7528\uff08\u6839\u636e\u5b50\u4efb\u52a12\u89c4\u5219\uff09\uff0c\u8df3\u8fc7\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\uff1a\u5339\u914d\u6027\u522b\u5173\u952e\u8bcd\u5e76\u6807\u51c6\u5316\n        for keyword, standardized in self.gender_mapping.items():\n            if keyword in text:\n                result[\"gender\"] = standardized\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u6027\u522b\u89c2\u5bdfProfile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"valueCodeableConcept\": {}\n        }\n\n        # \u8bbe\u7f6e\u6027\u522b\u89c2\u5bdf\u503c\n        gender = clinical_info.get(\"gender\")\n        if gender:\n            coding_display = \"Male\" if gender == \"male\" else \"Female\"\n            observation[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n                        \"code\": gender,\n                        \"display\": coding_display\n                    }\n                ],\n                \"text\": coding_display\n            }\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u6027\u522bObservation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u6027\u522b\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08gender\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"gender\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s24108", "deepquery_id": "0b9761c283ea11f08dec4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk615-pathological-t-stage-observation\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk615-observation-codes-cs\"\n        self.main_code = \"pathological-t-stage\"\n        self.main_code_display = \"\u75c5\u7406T\u5206\u671f\"\n\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"resection-margin-status\": {\"display\": \"\u624b\u672f\u5207\u7f18\u72b6\u6001\", \"value_type\": \"CodeableConcept\"},\n            \"pathological-n-stage\": {\"display\": \"\u75c5\u7406N\u5206\u671f\", \"value_type\": \"CodeableConcept\"},\n            \"gleason-score\": {\"display\": \"Gleason\u8bc4\u5206\", \"value_type\": \"Integer\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\n            'pT3a', 'pT3b', 'pT4', 'R1', 'pN1', 'Gleason\u8bc4\u5206\u22658', 'PSA>0.1',\n            '\u75c5\u7406T\u5206\u671f', '\u624b\u672f\u5207\u7f18\u72b6\u6001', '\u75c5\u7406N\u5206\u671f', 'Gleason\u8bc4\u5206', 'PSA\u503c'\n        ]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n\n        self.negative_keywords = [\n            '\u65e0', '\u672a\u89c1', '\u4e0d\u4f34', '\u6392\u9664', '\u4e0d\u7b26\u5408', '\u9634\u6027', '\u672a\u8fbe\u5230', '\u975e',\n            '\u4e0d\u6ee1\u8db3', '\u672a\u63d0\u793a', '\u672a\u663e\u793a', '\u6b63\u5e38', '\u9634\u6027\u7ed3\u679c'\n        ]  # \u5426\u5b9a\u5173\u952e\u8bcd\n\n        self.negative_patterns = [\n            '\u75c5\u7406T\u5206\u671f\u672a\u8fbepT3a-4', '\u624b\u672f\u5207\u7f18\u9634\u6027', '\u5207\u7f18R0', '\u65e0\u6dcb\u5df4\u7ed3\u8f6c\u79fb',\n            'Gleason\u8bc4\u5206<8', 'PSA\u22640.1ng/ml', 'PSA\u672a\u5347\u9ad8', '\u4e0d\u6ee1\u8db3\u9ad8\u5371\u6807\u51c6'\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u5217\u8868\uff08\u7528\u4e8e\u540e\u7eed\u5904\u7406\u987a\u5e8f\u63a7\u5236\uff09\n        self.extract_field_list = [\n            '\u75c5\u7406T\u5206\u671f\u662f\u5426\u4e3apT3a-4',\n            '\u624b\u672f\u5207\u7f18\u72b6\u6001\u662f\u5426\u4e3aR1',\n            '\u75c5\u7406N\u5206\u671f\u662f\u5426\u4e3apN1',\n            'Gleason\u8bc4\u5206\u662f\u5426\u22658',\n            'PSA\u503c\u662f\u5426\uff1e0.1ng/ml'\n        ]\n\n        # \u5b57\u6bb5\u63d0\u53d6\u89c4\u5219\u6620\u5c04\u8868\uff08key\u4e3a\u5b57\u6bb5\u540d\uff0cvalue\u4e3a\u89c4\u5219\u63cf\u8ff0\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u7b49\uff09\n        self.field_extraction_rules = {\n            '\u75c5\u7406T\u5206\u671f\u662f\u5426\u4e3apT3a-4': {\n                'method': '\u5173\u952e\u8bcd\u5339\u914d+\u6b63\u5219\u5339\u914d',\n                'keywords': ['pT3a', 'pT3b', 'pT4', 'pT3-4'],\n                'patterns': [r'(pT3[a-b]|pT4)']\n            },\n            '\u624b\u672f\u5207\u7f18\u72b6\u6001\u662f\u5426\u4e3aR1': {\n                'method': '\u5173\u952e\u8bcd\u5339\u914d',\n                'keywords': ['R1', '\u5207\u7f18\u9633\u6027', '\u955c\u4e0b\u5207\u7f18\u9633\u6027'],\n                'patterns': []\n            },\n            '\u75c5\u7406N\u5206\u671f\u662f\u5426\u4e3apN1': {\n                'method': '\u5173\u952e\u8bcd\u5339\u914d',\n                'keywords': ['pN1', '\u533a\u57df\u6dcb\u5df4\u7ed3\u8f6c\u79fb'],\n                'patterns': []\n            },\n            'Gleason\u8bc4\u5206\u662f\u5426\u22658': {\n                'method': '\u6b63\u5219\u5339\u914d',\n                'keywords': [],\n                'patterns': [\n                    r'Gleason\u8bc4\u5206\u4e3a?(8|9|10)',\n                    r'GS\\s*(\u2265|>=|=)\\s*([8-9]|10)',\n                    r'Gleason\u8bc4\u5206([8-9]|10)'\n                ]\n            },\n            'PSA\u503c\u662f\u5426\uff1e0.1ng/ml': {\n                'method': '\u6b63\u5219\u5339\u914d',\n                'keywords': [],\n                'patterns': [\n                    r'PSA[\u4e3a\u662f]?\\s*(>|\uff1e)[\\s\\d\\.]+ng/ml',\n                    r'\u672f\u540ePSA[\u4e3a\u662f]?\\s*[\\d\\.]+ng/ml',\n                    r'PSA[\\s\\d\\.]+(ng/ml|ng/mL)>0\\.1'\n                ]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u524d\u5217\u817a\u764c\u9ad8\u5371\u75c5\u7406\u7279\u5f81\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"is_pt3a_4\": None,      # \u75c5\u7406T\u5206\u671f\u662f\u5426\u4e3apT3a-4\n            \"is_r1\": None,          # \u624b\u672f\u5207\u7f18\u72b6\u6001\u662f\u5426\u4e3aR1\n            \"is_pn1\": None,         # \u75c5\u7406N\u5206\u671f\u662f\u5426\u4e3apN1\n            \"is_gs_ge_8\": None,     # Gleason\u8bc4\u5206\u662f\u5426\u22658\n            \"is_psa_gt_01\": None    # PSA\u503c\u662f\u5426\uff1e0.1ng/ml\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3aFalse\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            # \u5168\u90e8\u5b57\u6bb5\u8bbe\u4e3aFalse\uff08\u8868\u793a\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff09\n            for key in result:\n                result[key] = False\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\uff1a\u9010\u4e2a\u5b57\u6bb5\u6309\u89c4\u5219\u63d0\u53d6\n        for field in self.extract_field_list:\n            field_key = field.replace(\"\u662f\u5426\u4e3a\", \"\").replace(\"\u662f\u5426\", \"\").replace(\"\uff1e\", \">\").replace(\"\u2265\", \">=\")\n            field_key = field_key.replace(\" \", \"-\").lower()\n            field_key = field_key.replace(\"\u75c5\u7406t\u5206\u671f\", \"is_pt3a_4\").replace(\"\u624b\u672f\u5207\u7f18\u72b6\u6001\", \"is_r1\")\n            field_key = field_key.replace(\"\u75c5\u7406n\u5206\u671f\", \"is_pn1\").replace(\"gleason\u8bc4\u5206\", \"is_gs_ge_8\")\n            field_key = field_key.replace(\"psa\u503c\", \"is_psa_gt_01\")\n\n            rule = self.field_extraction_rules[field]\n            method = rule[\"method\"]\n            keywords = rule.get(\"keywords\", [])\n            patterns = rule.get(\"patterns\", [])\n\n            if method == \"\u5173\u952e\u8bcd\u5339\u914d\":\n                result[field_key] = any(kw in text for kw in keywords)\n            elif method == \"\u6b63\u5219\u5339\u914d\":\n                matched = any(re.search(pattern, text) for pattern in patterns)\n                result[field_key] = matched\n            elif method == \"\u5173\u952e\u8bcd\u5339\u914d+\u6b63\u5219\u5339\u914d\":\n                keyword_match = any(kw in text for kw in keywords)\n                pattern_match = any(re.search(pattern, text) for pattern in patterns)\n                result[field_key] = keyword_match or pattern_match\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u524d\u5217\u817a\u764c\u75c5\u7406T\u5206\u671fProfile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u7ec4\u4ef6\uff1a\u624b\u672f\u5207\u7f18\u72b6\u6001\uff08CodeableConcept\uff09\n        resection_status_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"observation-cs\", \"component-cs\"),\n                        \"code\": \"resection-margin-status\",\n                        \"display\": self.component_code_map[\"resection-margin-status\"][\"display\"]\n                    }\n                ],\n                \"text\": self.component_code_map[\"resection-margin-status\"][\"display\"]\n            }\n        }\n        if clinical_info[\"is_r1\"] is True:\n            resection_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": f\"{self.main_code_system.replace('observation-cs', 'resection-margin-cs')}\",\n                        \"code\": \"R1\",\n                        \"display\": \"\u5207\u7f18\u9633\u6027\"\n                    }\n                ],\n                \"text\": \"R1\uff08\u5207\u7f18\u9633\u6027\uff09\"\n            }\n        elif clinical_info[\"is_r1\"] is False:\n            resection_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": f\"{self.main_code_system.replace('observation-cs', 'resection-margin-cs')}\",\n                        \"code\": \"R0\",\n                        \"display\": \"\u5207\u7f18\u9634\u6027\"\n                    }\n                ],\n                \"text\": \"R0\uff08\u5207\u7f18\u9634\u6027\uff09\"\n            }\n        observation[\"component\"].append(resection_status_comp)\n\n        # \u6dfb\u52a0\u7ec4\u4ef6\uff1a\u75c5\u7406N\u5206\u671f\uff08CodeableConcept\uff09\n        pn_stage_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"observation-cs\", \"component-cs\"),\n                        \"code\": \"pathological-n-stage\",\n                        \"display\": self.component_code_map[\"pathological-n-stage\"][\"display\"]\n                    }\n                ],\n                \"text\": self.component_code_map[\"pathological-n-stage\"][\"display\"]\n            }\n        }\n        if clinical_info[\"is_pn1\"] is True:\n            pn_stage_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": f\"{self.main_code_system.replace('observation-cs', 'pathological-n-stage-cs')}\",\n                        \"code\": \"pN1\",\n                        \"display\": \"\u533a\u57df\u6dcb\u5df4\u7ed3\u8f6c\u79fb\"\n                    }\n                ],\n                \"text\": \"pN1\uff08\u533a\u57df\u6dcb\u5df4\u7ed3\u8f6c\u79fb\uff09\"\n            }\n        elif clinical_info[\"is_pn1\"] is False:\n            pn_stage_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": f\"{self.main_code_system.replace('observation-cs', 'pathological-n-stage-cs')}\",\n                        \"code\": \"pN0\",\n                        \"display\": \"\u65e0\u533a\u57df\u6dcb\u5df4\u7ed3\u8f6c\u79fb\"\n                    }\n                ],\n                \"text\": \"pN0\uff08\u65e0\u533a\u57df\u6dcb\u5df4\u7ed3\u8f6c\u79fb\uff09\"\n            }\n        observation[\"component\"].append(pn_stage_comp)\n\n        # \u6dfb\u52a0\u7ec4\u4ef6\uff1aGleason\u8bc4\u5206\uff08Integer\uff09\n        if clinical_info[\"is_gs_ge_8\"] is not None:\n            gleason_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"observation-cs\", \"component-cs\"),\n                            \"code\": \"gleason-score\",\n                            \"display\": self.component_code_map[\"gleason-score\"][\"display\"]\n                        }\n                    ],\n                    \"text\": self.component_code_map[\"gleason-score\"][\"display\"]\n                },\n                \"valueInteger\": 8 if clinical_info[\"is_gs_ge_8\"] else 6  # \u793a\u4f8b\u8d4b\u503c\n            }\n            observation[\"component\"].append(gleason_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u524d\u5217\u817a\u764c\u9ad8\u5371\u75c5\u7406\u7279\u5f81Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5b57\u6bb5\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if all(v is None for v in clinical_info.values()):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s18207", "deepquery_id": "76f0c76f785711f0b7144c5f7088cb2d", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk265-preoperative-cardiac-troponin-observation\"\n        self.main_code_system = \"http://loinc.org\"\n        self.main_code = \"10839-9|6598-7\"\n        self.main_code_display = \"\u5fc3\u808c\u808c\u9499\u86cb\u767dI/\u5fc3\u808c\u808c\u9499\u86cb\u767dT\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5f53\u524d\u4e3a\u7a7a\uff0c\u4f46\u4fdd\u7559\u7ed3\u6784\u4ee5\u5907\u540e\u7eed\u6269\u5c55\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u5fc3\u808c\u808c\u9499\u86cb\u767d\", \"\u808c\u9499\u86cb\u767d\", \"cTnI\", \"cTnT\", \"\u5fc3\u6897\u6307\u6807\", \"\u5fc3\u810f\u6807\u5fd7\u7269\", \"\u672f\u524d\u68c0\u67e5\", \"\u672f\u524d\u68c0\u6d4b\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u672a\u89c1\", \"\u4e0d\", \"\u672a\u63d0\u53ca\", \"\u6b63\u5e38\", \"\u9634\u6027\", \"\u672a\u6d4b\", \"\u7f3a\u5931\", \"\u62d2\u7edd\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u672a\u89c1\u660e\u663e\u5347\u9ad8\", \"\u672a\u89c1\u5f02\u5e38\", \"cTnI/T\u6b63\u5e38\", \"\u5fc3\u808c\u9176\u6b63\u5e38\", \"\u672a\u68c0\u6d4b\u5230\u5347\u9ad8\", \"\u7ed3\u679c\u9634\u6027\", \"\u672a\u63d0\u793a\u5fc3\u6897\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\n        self.extraction_patterns = {\n            \"\u672f\u524d\u8840\u6e05cTnI\u503c\": [\n                r\"\u672f\u524d[\u8840\u6e05]*c[Tt][Nn][Ii][\u4e3a\u662f:]\\s*([0-9]+\\.?[0-9]*)\",\n                r\"[cC][Tt][Nn][Ii][:\uff1a]\\s*([0-9]+\\.?[0-9]*)\",\n                r\"\u808c\u9499\u86cb\u767d[Ii][:\uff1a]\\s*([0-9]+\\.?[0-9]*)\"\n            ],\n            \"\u672f\u524d\u8840\u6e05cTnT\u503c\": [\n                r\"\u672f\u524d[\u8840\u6e05]*c[Tt][Nn][Tt][\u4e3a\u662f:]\\s*([0-9]+\\.?[0-9]*)\",\n                r\"[cC][Tt][Nn][Tt][:\uff1a]\\s*([0-9]+\\.?[0-9]*)\",\n                r\"\u808c\u9499\u86cb\u767d[Tt][:\uff1a]\\s*([0-9]+\\.?[0-9]*)\"\n            ],\n            \"\u91c7\u6837\u65f6\u95f4\": [\n                r\"(\u672f\u524d)?\u91c7\u6837\u65f6\u95f4[:\uff1a]\\s*(\\d{4}[-\u5e74]\\d{1,2}[-\u6708]\\d{1,2}[\u65e5]?)\",\n                r\"(\u672f\u524d)?\u62bd\u8840\u65f6\u95f4[:\uff1a]\\s*(\\d{4}[-\u5e74]\\d{1,2}[-\u6708]\\d{1,2}[\u65e5]?)\",\n                r\"(\\d{4}[-/]\\d{1,2}[-/]\\d{1,2}\\s*\\d{1,2}:\\d{2})\"\n            ],\n            \"\u5173\u8054\u624b\u672f\u65e5\u671f\": [\n                r\"\u624b\u672f\u65e5\u671f[:\uff1a]\\s*(\\d{4}[-\u5e74]\\d{1,2}[-\u6708]\\d{1,2}[\u65e5]?)\",\n                r\"\u62df\u884c\u624b\u672f\u65f6\u95f4[:\uff1a]\\s*(\\d{4}[-\u5e74]\\d{1,2}[-\u6708]\\d{1,2}[\u65e5]?)\",\n                r\"(\u51a0\u8109\u642d\u6865|\u74e3\u819c\u7f6e\u6362|\u4ecb\u5165\u6cbb\u7597)\u672f[\u65e5\u671f][:\uff1a]\\s*(\\d{4}[-\u5e74]\\d{1,2}[-\u6708]\\d{1,2}[\u65e5]?)\"\n            ]\n        }\n\n        # \u53ef\u9009\uff1a\u5355\u4f4d\u8f6c\u6362\u6620\u5c04\u8868\uff08\u5982\u672a\u6765\u6d89\u53ca\u6570\u503c\u5355\u4f4d\u5904\u7406\u53ef\u542f\u7528\uff09\n        # self.unit_convert_map = {}\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u672f\u524d\u5fc3\u808c\u808c\u9499\u86cb\u767d\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"ctni_value\": None,      # \u672f\u524d\u8840\u6e05cTnI\u503c\n            \"ctnt_value\": None,      # \u672f\u524d\u8840\u6e05cTnT\u503c\n            \"sampling_time\": None,   # \u91c7\u6837\u65f6\u95f4\n            \"surgery_date\": None     # \u5173\u8054\u624b\u672f\u65e5\u671f\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u663e\u8457\u672f\u524d\u5fc3\u808c\u635f\u4f24\u8868\u73b0\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22648\u5b57\u7b26\uff08\u533b\u5b66\u63cf\u8ff0\u4e60\u60ef\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 8 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            # \u6807\u8bb0\u6240\u6709\u5b57\u6bb5\u4e3a\u201c\u65e0\u663e\u8457\u5f02\u5e38\u201d\u72b6\u6001\uff08None\u8868\u793a\u672a\u63d0\u53ca\u6216\u5426\u5b9a\uff09\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\uff1a\u6309\u5b50\u4efb\u52a12\u89c4\u5219\u9010\u9879\u63d0\u53d6\n        # \u63d0\u53d6\u672f\u524d\u8840\u6e05cTnI\u503c\n        for pattern in self.extraction_patterns[\"\u672f\u524d\u8840\u6e05cTnI\u503c\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"ctni_value\"] = float(match.group(1))\n                break\n\n        # \u63d0\u53d6\u672f\u524d\u8840\u6e05cTnT\u503c\n        for pattern in self.extraction_patterns[\"\u672f\u524d\u8840\u6e05cTnT\u503c\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"ctnt_value\"] = float(match.group(1))\n                break\n\n        # \u63d0\u53d6\u91c7\u6837\u65f6\u95f4\n        for pattern in self.extraction_patterns[\"\u91c7\u6837\u65f6\u95f4\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"sampling_time\"] = match.group(2) if \"\u672f\u524d\" in pattern else match.group(1)\n                break\n\n        # \u63d0\u53d6\u5173\u8054\u624b\u672f\u65e5\u671f\n        for pattern in self.extraction_patterns[\"\u5173\u8054\u624b\u672f\u65e5\u671f\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"surgery_date\"] = match.group(2) if len(match.groups()) > 1 else match.group(1)\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u672f\u524d\u5fc3\u808c\u808c\u9499\u86cb\u767dProfile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u672f\u524d\u8840\u6e05cTnI\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"ctni_value\"] is not None:\n            ctni_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": \"10839-9\",\n                            \"display\": \"Cardiac troponin I\"\n                        }\n                    ],\n                    \"text\": \"\u672f\u524d\u8840\u6e05cTnI\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"ctni_value\"],\n                    \"unit\": \"ng/mL\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"ng/mL\"\n                }\n            }\n            observation[\"component\"].append(ctni_comp)\n\n        # \u6dfb\u52a0\u672f\u524d\u8840\u6e05cTnT\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"ctnt_value\"] is not None:\n            ctnt_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": \"6598-7\",\n                            \"display\": \"Cardiac troponin T\"\n                        }\n                    ],\n                    \"text\": \"\u672f\u524d\u8840\u6e05cTnT\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"ctnt_value\"],\n                    \"unit\": \"ng/mL\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"ng/mL\"\n                }\n            }\n            observation[\"component\"].append(ctnt_comp)\n\n        # \u6dfb\u52a0\u91c7\u6837\u65f6\u95f4\u7ec4\u4ef6\uff08DateTime\uff09\n        if clinical_info[\"sampling_time\"] is not None:\n            sampling_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": \"11558-3\",\n                            \"display\": \"Specimen collection time\"\n                        }\n                    ],\n                    \"text\": \"\u91c7\u6837\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"sampling_time\"]\n            }\n            observation[\"component\"].append(sampling_comp)\n\n        # \u6dfb\u52a0\u5173\u8054\u624b\u672f\u65e5\u671f\u7ec4\u4ef6\uff08DateTime\uff09\n        if clinical_info[\"surgery_date\"] is not None:\n            surgery_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": \"8564-0\",\n                            \"display\": \"Surgical procedure date\"\n                        }\n                    ],\n                    \"text\": \"\u5173\u8054\u624b\u672f\u65e5\u671f\"\n                },\n                \"valueDateTime\": clinical_info[\"surgery_date\"]\n            }\n            observation[\"component\"].append(surgery_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u672f\u524d\u5fc3\u808c\u808c\u9499\u86cb\u767dObservation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u672f\u524d\u5fc3\u808c\u808c\u9499\u86cb\u767d\u76f8\u5173\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5b57\u6bb5\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if all(v is None for v in clinical_info.values()):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s12109", "deepquery_id": "0ebab8dc847411f084db4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk635-LaboratoryExaminationProfile\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk635-LaboratoryTestsCS\"\n        self.main_code = \"AST\"\n        self.main_code_display = \"\u5929\u95e8\u51ac\u6c28\u9178\u6c28\u57fa\u8f6c\u79fb\u9176\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5f53\u524d\u4e3a\u7a7a\uff0c\u4f46\u4fdd\u7559\u7ed3\u6784\u4ee5\u652f\u6301\u672a\u6765\u6269\u5c55\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\n            \"AST\", \"ALT\", \"BUN\", \"Cr\", \"\u5929\u95e8\u51ac\u6c28\u9178\u6c28\u57fa\u8f6c\u79fb\u9176\", \"\u4e19\u6c28\u9178\u6c28\u57fa\u8f6c\u79fb\u9176\",\n            \"\u5c3f\u7d20\u6c2e\", \"\u808c\u9150\", \"\u809d\u529f\u80fd\", \"\u80be\u529f\u80fd\", \"\u751f\u5316\", \"\u5b9e\u9a8c\u5ba4\u68c0\u67e5\", \"\u5316\u9a8c\"\n        ]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n\n        self.negative_keywords = [\n            \"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u6b63\u5e38\", \"\u672a\u89c1\", \"\u6ca1\u6709\", \"\u672a\u63d0\u793a\", \"\u672a\u663e\u793a\"\n        ]  # \u5426\u5b9a\u5173\u952e\u8bcd\n\n        self.negative_patterns = [\n            \"AST\u6b63\u5e38\", \"ALT\u6b63\u5e38\", \"BUN\u6b63\u5e38\", \"Cr\u6b63\u5e38\", \"\u5404\u9879\u6307\u6807\u5747\u6b63\u5e38\",\n            \"\u672a\u89c1\u660e\u663e\u5f02\u5e38\", \"\u65e0\u660e\u663e\u5347\u9ad8\", \"\u672a\u8d85\u51fa\u6b63\u5e38\u8303\u56f4\", \"\u672a\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5219\u8868\u8fbe\u5f0f\u6620\u5c04\uff1a\u5b57\u6bb5\u540d -> \u7f16\u8bd1\u540e\u7684\u6b63\u5219\u5bf9\u8c61\u5217\u8868\n        self.field_regex_map = {\n            \"AST\u6570\u503c\": [re.compile(r'AST[:\uff1a]?\\s*(\\d+(\\.\\d+)?)\\s*U/L')],\n            \"ALT\u6570\u503c\": [re.compile(r'ALT[:\uff1a]?\\s*(\\d+(\\.\\d+)?)\\s*U/L')],\n            \"BUN\u6570\u503c\": [re.compile(r'BUN[:\uff1a]?\\s*(\\d+(\\.\\d+)?)\\s*mmol/L')],\n            \"Cr\u6570\u503c\": [re.compile(r'Cr[:\uff1a]?\\s*(\\d+(\\.\\d+)?)\\s*\u03bc?mol/L')]\n        }\n\n        # \u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\u7684\u5224\u65ad\u5173\u952e\u8bcd\n        self.above_normal_positive_keywords = [\n            \"\u5347\u9ad8\", \"\u2191\", \"\u504f\u9ad8\", \"\u5f02\u5e38\u5347\u9ad8\", \"\u663e\u8457\u5347\u9ad8\", \"\u8d85\u51fa\u6b63\u5e38\u8303\u56f4\", \"\u8d85\u8fc7\u6b63\u5e38\u4e0a\u96501\u500d\u4ee5\u4e0a\"\n        ]\n        self.above_normal_negative_keywords = [\n            \"\u6b63\u5e38\", \"\u672a\u89c1\u5f02\u5e38\", \"\u65e0\u660e\u663e\u5347\u9ad8\", \"\u672a\u5347\u9ad8\", \"\u5728\u6b63\u5e38\u8303\u56f4\"\n        ]\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u5b9e\u9a8c\u5ba4\u68c0\u67e5\u6307\u6807\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"AST_value\": None,\n            \"ALT_value\": None,\n            \"BUN_value\": None,\n            \"Cr_value\": None,\n            \"above_normal\": None  # True/False/None\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u672a\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"above_normal\"] = False\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\n        # \u63d0\u53d6\u6570\u503c\u7c7b\u5b57\u6bb5\n        for field_name, patterns in self.field_regex_map.items():\n            for pattern in patterns:\n                match = pattern.search(text)\n                if match:\n                    result[field_name] = float(match.group(1))\n                    break\n\n        # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\uff08\u4ec5\u5728above_normal\u5c1a\u672a\u4e3aFalse\u65f6\u8fdb\u884c\uff09\n        if result[\"above_normal\"] is not False:\n            # \u6b63\u5411\u5173\u952e\u8bcd\u5224\u65ad\n            has_positive_keyword = any(keyword in text for keyword in self.above_normal_positive_keywords)\n            # \u8d1f\u5411\u5173\u952e\u8bcd\u5224\u65ad\n            has_negative_keyword = any(keyword in text for keyword in self.above_normal_negative_keywords)\n            if has_positive_keyword and not has_negative_keyword:\n                result[\"above_normal\"] = True\n            elif has_negative_keyword and not has_positive_keyword:\n                result[\"above_normal\"] = False\n            else:\n                result[\"above_normal\"] = None  # \u65e0\u6cd5\u5224\u65ad\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u5b9e\u9a8c\u5ba4\u68c0\u67e5\u6307\u6807Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0AST\u6570\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"AST_value\"] is not None:\n            ast_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryComponentCS\"),\n                            \"code\": \"AST-value\",\n                            \"display\": \"AST\u6570\u503c\"\n                        }\n                    ],\n                    \"text\": \"AST\u6570\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"AST_value\"],\n                    \"unit\": \"U/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"U/L\"\n                }\n            }\n            observation[\"component\"].append(ast_comp)\n\n        # \u6dfb\u52a0ALT\u6570\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"ALT_value\"] is not None:\n            alt_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryComponentCS\"),\n                            \"code\": \"ALT-value\",\n                            \"display\": \"ALT\u6570\u503c\"\n                        }\n                    ],\n                    \"text\": \"ALT\u6570\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"ALT_value\"],\n                    \"unit\": \"U/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"U/L\"\n                }\n            }\n            observation[\"component\"].append(alt_comp)\n\n        # \u6dfb\u52a0BUN\u6570\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"BUN_value\"] is not None:\n            bun_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryComponentCS\"),\n                            \"code\": \"BUN-value\",\n                            \"display\": \"BUN\u6570\u503c\"\n                        }\n                    ],\n                    \"text\": \"BUN\u6570\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"BUN_value\"],\n                    \"unit\": \"mmol/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"mmol/L\"\n                }\n            }\n            observation[\"component\"].append(bun_comp)\n\n        # \u6dfb\u52a0Cr\u6570\u503c\u7ec4\u4ef6\uff08Quantity\uff09\n        if clinical_info[\"Cr_value\"] is not None:\n            cr_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryComponentCS\"),\n                            \"code\": \"Cr-value\",\n                            \"display\": \"Cr\u6570\u503c\"\n                        }\n                    ],\n                    \"text\": \"Cr\u6570\u503c\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"Cr_value\"],\n                    \"unit\": \"\u03bcmol/L\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"umol/L\"  # FHIR\u6807\u51c6\u5355\u4f4d\u4ee3\u7801\n                }\n            }\n            observation[\"component\"].append(cr_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        above_normal_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryComponentCS\"),\n                        \"code\": \"above-normal\",\n                        \"display\": \"\u5404\u9879\u6307\u6807\u662f\u5426\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\"\n                    }\n                ],\n                \"text\": \"\u5404\u9879\u6307\u6807\u662f\u5426\u8d85\u8fc7\u6b63\u5e38\u503c\u4e00\u500d\"\n            }\n        }\n        if clinical_info[\"above_normal\"] is True:\n            above_normal_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryResultCS\"),\n                        \"code\": \"above-normal\",\n                        \"display\": \"\u662f\"\n                    }\n                ],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"above_normal\"] is False:\n            above_normal_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryResultCS\"),\n                        \"code\": \"within-normal\",\n                        \"display\": \"\u5426\"\n                    }\n                ],\n                \"text\": \"\u5426\"\n            }\n        else:\n            above_normal_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"LaboratoryTestsCS\", \"LaboratoryResultCS\"),\n                        \"code\": \"unknown\",\n                        \"display\": \"\u672a\u77e5\"\n                    }\n                ],\n                \"text\": \"\u672a\u77e5\"\n            }\n        observation[\"component\"].append(above_normal_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u5b9e\u9a8c\u5ba4\u68c0\u67e5Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u5b9e\u9a8c\u5ba4\u68c0\u67e5\u6307\u6807\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5173\u952e\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if all(clinical_info[key] is None for key in [\"AST_value\", \"ALT_value\", \"BUN_value\", \"Cr_value\", \"above_normal\"]):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s13", "deepquery_id": "0abadd8384a311f0847b4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk675-head-facial-herpes-zoster-condition\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/icd10\"\n        self.main_code = \"B02.9\"\n        self.main_code_display = \"\u5e26\u72b6\u75b1\u75b9\"\n\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"head\": {\"display\": \"\u5934\u90e8\", \"value_type\": \"CodeableConcept\"},\n            \"face\": {\"display\": \"\u9762\u90e8\", \"value_type\": \"CodeableConcept\"},\n            \"head_and_face\": {\"display\": \"\u5934\u9762\u90e8\", \"value_type\": \"CodeableConcept\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u5e26\u72b6\u75b1\u75b9\", \"\u5934\u9762\u90e8\u75b1\u75b9\", \"\u5934\u90e8\u75b1\u75b9\", \"\u9762\u90e8\u75b1\u75b9\", \"\u5934\u9762\u75b1\u75b9\", \"\u75b1\u75b9\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\u89c1\", \"\u672a\u63d0\u53ca\", \"\u6392\u9664\", \"\u975e\", \"\u4e0d\u662f\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u65e0\u5e26\u72b6\u75b1\u75b9\", \"\u5426\u8ba4\u5e26\u72b6\u75b1\u75b9\", \"\u672a\u89c1\u5e26\u72b6\u75b1\u75b9\u8868\u73b0\", \"\u6392\u9664\u5e26\u72b6\u75b1\u75b9\", \"\u4e0d\u662f\u5e26\u72b6\u75b1\u75b9\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u53ca\u89c4\u5219\u6620\u5c04\uff08\u7528\u4e8e\u7ed3\u6784\u5316\u6587\u672c\u89e3\u6790\uff09\n        self.extraction_field_rules = {\n            \"\u5e74\u9f84\": {\n                \"type\": \"regex\",\n                \"patterns\": [r'(\\d{1,3})\u5c81', r'\u5e74\u9f84(\\d{1,3})\u5c81?', r'\u60a3\u8005(\\d{1,3})\u5c81']\n            },\n            \"\u8bca\u65ad\u72b6\u6001\": {\n                \"type\": \"keyword\",\n                \"keywords\": [\"\u786e\u8bca\", \"\u7591\u4f3c\", \"\u521d\u8bca\", \"\u590d\u8bca\", \"\u590d\u53d1\", \"\u8bca\u65ad\u660e\u786e\", \"\u4e34\u5e8a\u8bca\u65ad\"]\n            },\n            \"\u8eab\u4f53\u90e8\u4f4d\": {\n                \"type\": \"keyword\",\n                \"keywords\": [\"\u5934\u9762\u90e8\", \"\u5934\u90e8\", \"\u9762\u90e8\", \"\u4e09\u53c9\u795e\u7ecf\u5206\u5e03\u533a\", \"\u773c\u5468\", \"\u53e3\u5468\", \"\u8033\u5468\", \"\u989d\u90e8\", \"\u989e\u90e8\"]\n            },\n            \"\u75be\u75c5\u540d\u79f0\": {\n                \"type\": \"keyword\",\n                \"keywords\": [\"\u5e26\u72b6\u75b1\u75b9\", \"\u5934\u9762\u90e8\u5e26\u72b6\u75b1\u75b9\", \"\u9762\u90e8\u75b1\u75b9\", \"\u5934\u90e8\u75b1\u75b9\", \"HZ\"]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u5934\u9762\u90e8\u5e26\u72b6\u75b1\u75b9\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"age\": None,          # \u5e74\u9f84\n            \"diagnosis_status\": None,   # \u8bca\u65ad\u72b6\u6001\n            \"body_site\": None,    # \u8eab\u4f53\u90e8\u4f4d\n            \"disease_name\": None  # \u75be\u75c5\u540d\u79f0\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u8be5\u75be\u75c5\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            # \u82e5\u5b58\u5728\u5426\u5b9a\uff0c\u5219\u6240\u6709\u5b57\u6bb5\u4fdd\u6301None\uff0c\u8868\u793a\u65e0\u76f8\u5173\u4fe1\u606f\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\u903b\u8f91\n        # \u63d0\u53d6\u5e74\u9f84\uff08\u6b63\u5219\u5339\u914d\uff09\n        age_rule = self.extraction_field_rules[\"\u5e74\u9f84\"]\n        for pattern in age_rule[\"patterns\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"age\"] = int(match.group(1))\n                break\n\n        # \u63d0\u53d6\u8bca\u65ad\u72b6\u6001\uff08\u5173\u952e\u8bcd\u5339\u914d\uff09\n        status_rule = self.extraction_field_rules[\"\u8bca\u65ad\u72b6\u6001\"]\n        for keyword in status_rule[\"keywords\"]:\n            if keyword in text:\n                result[\"diagnosis_status\"] = keyword\n                break\n\n        # \u63d0\u53d6\u8eab\u4f53\u90e8\u4f4d\uff08\u5173\u952e\u8bcd\u5339\u914d\uff09\n        site_rule = self.extraction_field_rules[\"\u8eab\u4f53\u90e8\u4f4d\"]\n        for keyword in site_rule[\"keywords\"]:\n            if keyword in text:\n                result[\"body_site\"] = keyword\n                break\n\n        # \u63d0\u53d6\u75be\u75c5\u540d\u79f0\uff08\u5173\u952e\u8bcd\u5339\u914d\uff09\n        disease_rule = self.extraction_field_rules[\"\u75be\u75c5\u540d\u79f0\"]\n        for keyword in disease_rule[\"keywords\"]:\n            if keyword in text:\n                result[\"disease_name\"] = keyword\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u5934\u9762\u90e8\u5e26\u72b6\u75b1\u75b9Condition Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u8eab\u4f53\u90e8\u4f4d\u201d\u7ec4\u4ef6\uff08\u6839\u636e\u5b9e\u9645\u63d0\u53d6\u503c\u9009\u62e9\u5408\u9002\u7684component code\uff09\n        body_site = clinical_info.get(\"body_site\")\n        if body_site:\n            component_code_key = None\n            if body_site == \"\u5934\u9762\u90e8\":\n                component_code_key = \"head_and_face\"\n            elif body_site == \"\u5934\u90e8\":\n                component_code_key = \"head\"\n            elif body_site == \"\u9762\u90e8\":\n                component_code_key = \"face\"\n\n            if component_code_key and component_code_key in self.component_code_map:\n                comp_info = self.component_code_map[component_code_key]\n                component = {\n                    \"code\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                                \"code\": component_code_key,\n                                \"display\": comp_info[\"display\"]\n                            }\n                        ],\n                        \"text\": comp_info[\"display\"]\n                    },\n                    \"valueCodeableConcept\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system,\n                                \"code\": self.main_code,\n                                \"display\": self.main_code_display\n                            }\n                        ],\n                        \"text\": body_site\n                    }\n                }\n                observation[\"component\"].append(component)\n\n        # \u6dfb\u52a0\u201c\u8bca\u65ad\u72b6\u6001\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        diagnosis_status = clinical_info.get(\"diagnosis_status\")\n        if diagnosis_status:\n            status_component = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"diagnosis-status\",\n                            \"display\": \"\u8bca\u65ad\u72b6\u6001\"\n                        }\n                    ],\n                    \"text\": \"\u8bca\u65ad\u72b6\u6001\"\n                },\n                \"valueCodeableConcept\": {\n                    \"text\": diagnosis_status\n                }\n            }\n            observation[\"component\"].append(status_component)\n\n        # \u6dfb\u52a0\u201c\u5e74\u9f84\u201d\u7ec4\u4ef6\uff08Quantity\uff09\n        age = clinical_info.get(\"age\")\n        if age is not None:\n            age_component = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"age-at-onset\",\n                            \"display\": \"\u53d1\u75c5\u65f6\u5e74\u9f84\"\n                        }\n                    ],\n                    \"text\": \"\u53d1\u75c5\u65f6\u5e74\u9f84\"\n                },\n                \"valueQuantity\": {\n                    \"value\": age,\n                    \"unit\": \"\u5c81\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"yr\"\n                }\n            }\n            observation[\"component\"].append(age_component)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u5934\u9762\u90e8\u5e26\u72b6\u75b1\u75b9Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u5934\u9762\u90e8\u5e26\u72b6\u75b1\u75b9\u76f8\u5173\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u89c6\u4e3a\u65e0\u6548\uff09\n            if all(value is None for value in clinical_info.values()):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s112", "deepquery_id": "0c7446b7854011f0b2034c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk735-nonneoplasm-disease-stage\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/icd10\"\n        self.main_code = \"saB15, saB16, saB17, saB18, saB19, saB20, saB21, saB22, saB23, saB24, saA15, saA16, saA17, saA18, saA19, saM30, saM31, saM32, saM33, saM34, saM35, saM36\"\n        self.main_code_display = \"\u975e\u80bf\u7624\u75be\u75c5\uff08\u5305\u62ec\u4f20\u67d3\u6027\u75be\u75c5\u548c\u7ed3\u7f14\u7ec4\u7ec7\u75c5\uff09\"\n        self.component_code_map = {}  # \u5f53\u524d\u65e0\u7ec4\u4ef6\u7f16\u7801\uff0c\u8bbe\u4e3a\u7a7a\u5b57\u5178\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\n            \"\u4f20\u67d3\u6027\u75be\u75c5\", \"\u7ed3\u7f14\u7ec4\u7ec7\u75c5\", \"\u6d3b\u52a8\u671f\", \"\u7532\u809d\", \"\u4e59\u809d\", \"\u827e\u6ecb\u75c5\", \"\u7ed3\u6838\",\n            \"\u7cfb\u7edf\u6027\u7ea2\u6591\u72fc\u75ae\", \"\u7c7b\u98ce\u6e7f\u5173\u8282\u708e\", \"\u8840\u7ba1\u708e\", \"\u76ae\u808c\u708e\", \"\u786c\u76ae\u75c5\", \"\u5e72\u71e5\u7efc\u5408\u5f81\",\n            \"\u6297\u6838\u6297\u4f53\", \"ANA\", \"\u6297ENA\", \"\u6297dsDNA\", \"\u8865\u4f53\", \"\u514d\u75ab\u6291\u5236\u5242\", \"\u6fc0\u7d20\u6cbb\u7597\"\n        ]\n\n        self.negative_keywords = [\n            \"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u6392\u9664\", \"\u6cbb\u6108\", \"\u597d\u8f6c\", \"\u7f13\u89e3\", \"\u63a7\u5236\u826f\u597d\", \"\u7a33\u5b9a\", \"\u65e2\u5f80\u53f2\"\n        ]\n\n        self.negative_patterns = [\n            \"\u65e0\u4e59\u809d\u75c5\u53f2\", \"\u5426\u8ba4\u7ed3\u6838\", \"\u65e0\u4f20\u67d3\u75c5\u63a5\u89e6\u53f2\", \"\u65e0\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u53f2\",\n            \"\u5426\u8ba4\u81ea\u8eab\u514d\u75ab\u6027\u75be\u75c5\", \"\u5df2\u6cbb\u6108\", \"\u75c5\u60c5\u7a33\u5b9a\", \"\u63a7\u5236\u826f\u597d\", \"\u7f13\u89e3\u671f\", \"\u975e\u6d3b\u52a8\u671f\"\n        ]\n\n        # \u63d0\u53d6\u5b57\u6bb5\u5217\u8868\n        self.extract_fields = [\n            \"\u662f\u5426\u60a3\u6709\u7532\u809d\u3001\u4e59\u809d\u3001\u827e\u6ecb\u75c5\u3001\u7ed3\u6838\u7b49\u4f20\u67d3\u6027\u75be\u75c5\",\n            \"\u662f\u5426\u60a3\u7ed3\u7f14\u7ec4\u7ec7\u75c5\",\n            \"\u4e0a\u8ff0\u75be\u75c5\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\"\n        ]\n\n        # \u5b57\u6bb5\u63d0\u53d6\u89c4\u5219\u6620\u5c04\uff08\u7528\u4e8e\u540e\u7eed\u5904\u7406\uff09\n        self.field_extraction_rules = {\n            \"\u662f\u5426\u60a3\u6709\u7532\u809d\u3001\u4e59\u809d\u3001\u827e\u6ecb\u75c5\u3001\u7ed3\u6838\u7b49\u4f20\u67d3\u6027\u75be\u75c5\": {\n                \"positive\": [\"\u60a3\u6709\u4e59\u809d\", \"\u786e\u8bca\u4e59\u809d\", \"\u4e59\u809d\u75c5\u6bd2\u643a\u5e26\u8005\", \"\u611f\u67d3HIV\", \"\u68c0\u51faHIV\", \"\u80ba\u7ed3\u6838\", \"\u786e\u8bca\u7ed3\u6838\", \"\u60a3\u6709\u7532\u809d\"],\n                \"negative\": [\"\u65e0\u4e59\u809d\", \"\u5426\u8ba4\u4e59\u809d\", \"\u672a\u611f\u67d3HIV\", \"\u6392\u9664\u7ed3\u6838\", \"\u65e0\u7532\u809d\", \"\u65e0\u4f20\u67d3\u75c5\u53f2\"]\n            },\n            \"\u662f\u5426\u60a3\u7ed3\u7f14\u7ec4\u7ec7\u75c5\": {\n                \"positive\": [\"\u7cfb\u7edf\u6027\u7ea2\u6591\u72fc\u75ae\", \"\u7c7b\u98ce\u6e7f\u5173\u8282\u708e\", \"\u76ae\u808c\u708e\", \"\u786c\u76ae\u75c5\", \"\u6df7\u5408\u7ed3\u7f14\u7ec4\u7ec7\u75c5\", \"\u5e72\u71e5\u7efc\u5408\u5f81\", \"\u8840\u7ba1\u708e\"],\n                \"negative\": [\"\u65e0\u7ed3\u7f14\u7ec4\u7ec7\u75c5\", \"\u5426\u8ba4\u7ed3\u7f14\u7ec4\u7ec7\u75c5\", \"\u672a\u89c1\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u8868\u73b0\"]\n            },\n            \"\u4e0a\u8ff0\u75be\u75c5\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\": {\n                \"patterns\": [\n                    r\"(\u4f20\u67d3\u6027\u75be\u75c5|\u7ed3\u7f14\u7ec4\u7ec7\u75c5|\u4e59\u809d|\u7cfb\u7edf\u6027\u7ea2\u6591\u72fc\u75ae|\u7c7b\u98ce\u6e7f\u5173\u8282\u708e|\u7ed3\u6838).*[\u5904\u4e8e]?[\u662f]?\u6d3b\u52a8\u671f\",\n                    r\"[\u662f\u5426].*\u6d3b\u52a8\u671f\u72b6\u6001\",\n                    r\"\u75c5\u60c5.*\u6d3b\u52a8\",\n                    r\"\u590d\u53d1.*\u6d3b\u8dc3\"\n                ]\n            }\n        }\n\n        # \u5355\u4f4d\u8f6c\u6362\u6620\u5c04\u8868\uff08\u5f53\u524d\u6682\u65e0\u660e\u786e\u5355\u4f4d\u8f6c\u6362\u9700\u6c42\uff0c\u4f46\u4fdd\u7559\u7ed3\u6784\u4ee5\u5907\u6269\u5c55\uff09\n        self.unit_convert_map = {}\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u4f20\u67d3\u6027\u75be\u75c5\u6216\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u6d3b\u52a8\u671f\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"infectious_disease\": None,  # \u662f\u5426\u60a3\u6709\u6307\u5b9a\u4f20\u67d3\u6027\u75be\u75c5\uff08True/False/None\uff09\n            \"connective_disease\": None,  # \u662f\u5426\u60a3\u6709\u7ed3\u7f14\u7ec4\u7ec7\u75c5\uff08True/False/None\uff09\n            \"is_active_phase\": None      # \u4e0a\u8ff0\u75be\u75c5\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\uff08True/False/None\uff09\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\u903b\u8f91\n        def check_negation(core_positions, neg_words=None, neg_patterns=None):\n            has_explicit_negative = neg_patterns and any(re.search(pattern, text) for pattern in neg_patterns)\n            has_context_negative = False\n            if neg_words:\n                for neg_word in neg_words:\n                    neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n                    if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                        has_context_negative = True\n                        break\n            return has_explicit_negative or has_context_negative\n\n        # \u63d0\u53d6\u6838\u5fc3\u8bcd\u4f4d\u7f6e\u7528\u4e8e\u4e0a\u4e0b\u6587\u5426\u5b9a\u5224\u65ad\n        core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n\n        # \u5224\u65ad\u662f\u5426\u6709\u4f20\u67d3\u6027\u75be\u75c5\n        infectious_positive = self.field_extraction_rules[\"\u662f\u5426\u60a3\u6709\u7532\u809d\u3001\u4e59\u809d\u3001\u827e\u6ecb\u75c5\u3001\u7ed3\u6838\u7b49\u4f20\u67d3\u6027\u75be\u75c5\"][\"positive\"]\n        infectious_negative = self.field_extraction_rules[\"\u662f\u5426\u60a3\u6709\u7532\u809d\u3001\u4e59\u809d\u3001\u827e\u6ecb\u75c5\u3001\u7ed3\u6838\u7b49\u4f20\u67d3\u6027\u75be\u75c5\"][\"negative\"]\n        if any(keyword in text for keyword in infectious_positive):\n            if not check_negation(core_positions, self.negative_keywords, self.negative_patterns):\n                result[\"infectious_disease\"] = True\n            else:\n                result[\"infectious_disease\"] = False\n        elif any(keyword in text for keyword in infectious_negative):\n            result[\"infectious_disease\"] = False\n\n        # \u5224\u65ad\u662f\u5426\u6709\u7ed3\u7f14\u7ec4\u7ec7\u75c5\n        connective_positive = self.field_extraction_rules[\"\u662f\u5426\u60a3\u7ed3\u7f14\u7ec4\u7ec7\u75c5\"][\"positive\"]\n        connective_negative = self.field_extraction_rules[\"\u662f\u5426\u60a3\u7ed3\u7f14\u7ec4\u7ec7\u75c5\"][\"negative\"]\n        if any(keyword in text for keyword in connective_positive):\n            if not check_negation(core_positions, self.negative_keywords, self.negative_patterns):\n                result[\"connective_disease\"] = True\n            else:\n                result[\"connective_disease\"] = False\n        elif any(keyword in text for keyword in connective_negative):\n            result[\"connective_disease\"] = False\n\n        # \u5224\u65ad\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\n        activity_patterns = self.field_extraction_rules[\"\u4e0a\u8ff0\u75be\u75c5\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\"][\"patterns\"]\n        if any(re.search(pattern, text) for pattern in activity_patterns):\n            # \u518d\u6b21\u68c0\u67e5\u5426\u5b9a\u60c5\u51b5\n            if not check_negation(core_positions, self.negative_keywords, self.negative_patterns):\n                result[\"is_active_phase\"] = True\n            else:\n                result[\"is_active_phase\"] = False\n        elif \"\u975e\u6d3b\u52a8\u671f\" in text or \"\u7f13\u89e3\u671f\" in text or \"\u63a7\u5236\u826f\u597d\" in text:\n            result[\"is_active_phase\"] = False\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u975e\u80bf\u7624\u75be\u75c5\u9636\u6bb5Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6784\u5efa\u7ec4\u4ef6\u7f16\u7801\u7cfb\u7edfURI\u6a21\u677f\n        component_system_uri = self.main_code_system.replace(\"icd10\", \"component-cs\")\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u60a3\u6709\u4f20\u67d3\u6027\u75be\u75c5\u201d\u7ec4\u4ef6\n        infectious_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": component_system_uri,\n                        \"code\": \"infectious-disease-status\",\n                        \"display\": \"\u4f20\u67d3\u6027\u75be\u75c5\u72b6\u6001\"\n                    }\n                ],\n                \"text\": \"\u4f20\u67d3\u6027\u75be\u75c5\u72b6\u6001\"\n            }\n        }\n        if clinical_info[\"infectious_disease\"] is True:\n            infectious_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"infectious-disease-status-cs\"),\n                    \"code\": \"present\",\n                    \"display\": \"\u5b58\u5728\"\n                }],\n                \"text\": \"\u5b58\u5728\"\n            }\n        elif clinical_info[\"infectious_disease\"] is False:\n            infectious_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"infectious-disease-status-cs\"),\n                    \"code\": \"absent\",\n                    \"display\": \"\u4e0d\u5b58\u5728\"\n                }],\n                \"text\": \"\u4e0d\u5b58\u5728\"\n            }\n        observation[\"component\"].append(infectious_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u60a3\u6709\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u201d\u7ec4\u4ef6\n        connective_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": component_system_uri,\n                        \"code\": \"connective-tissue-disease-status\",\n                        \"display\": \"\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u72b6\u6001\"\n                    }\n                ],\n                \"text\": \"\u7ed3\u7f14\u7ec4\u7ec7\u75c5\u72b6\u6001\"\n            }\n        }\n        if clinical_info[\"connective_disease\"] is True:\n            connective_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"connective-disease-status-cs\"),\n                    \"code\": \"present\",\n                    \"display\": \"\u5b58\u5728\"\n                }],\n                \"text\": \"\u5b58\u5728\"\n            }\n        elif clinical_info[\"connective_disease\"] is False:\n            connective_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"connective-disease-status-cs\"),\n                    \"code\": \"absent\",\n                    \"display\": \"\u4e0d\u5b58\u5728\"\n                }],\n                \"text\": \"\u4e0d\u5b58\u5728\"\n            }\n        observation[\"component\"].append(connective_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u5904\u4e8e\u6d3b\u52a8\u671f\u201d\u7ec4\u4ef6\n        active_phase_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": component_system_uri,\n                        \"code\": \"disease-active-phase\",\n                        \"display\": \"\u75be\u75c5\u6d3b\u52a8\u671f\u72b6\u6001\"\n                    }\n                ],\n                \"text\": \"\u75be\u75c5\u6d3b\u52a8\u671f\u72b6\u6001\"\n            }\n        }\n        if clinical_info[\"is_active_phase\"] is True:\n            active_phase_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"active-phase-status-cs\"),\n                    \"code\": \"active\",\n                    \"display\": \"\u6d3b\u52a8\u671f\"\n                }],\n                \"text\": \"\u6d3b\u52a8\u671f\"\n            }\n        elif clinical_info[\"is_active_phase\"] is False:\n            active_phase_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": component_system_uri.replace(\"component-cs\", \"active-phase-status-cs\"),\n                    \"code\": \"inactive\",\n                    \"display\": \"\u975e\u6d3b\u52a8\u671f\"\n                }],\n                \"text\": \"\u975e\u6d3b\u52a8\u671f\"\n            }\n        observation[\"component\"].append(active_phase_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u975e\u80bf\u7624\u75be\u75c5\u6d3b\u52a8\u671fObservation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n            \n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\n            clinical_info = self._extract_clinical_info(case_text)\n            \n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5173\u952e\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u89c6\u4e3a\u65e0\u6548\uff09\n            if all(v is None for v in clinical_info.values()):\n                continue\n            \n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n            \n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s1540", "deepquery_id": "5321b12e855a11f093bb4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk745-postop-mechanical-ventilation\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk745-procedure-type-cs\"\n        self.main_code = \"invasive_mechanical_ventilation\"\n        self.main_code_display = \"\u6709\u521b\u673a\u68b0\u901a\u6c14\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"\u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\": {\"value_type\": \"CodeableConcept\"},\n            \"\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\": {\"value_type\": \"CodeableConcept\"},\n            \"\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\": {\"value_type\": \"dateTime\"},\n            \"\u76f8\u5173\u624b\u672f\u4fe1\u606f\": {\"value_type\": \"CodeableConcept\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u673a\u68b0\u901a\u6c14\", \"\u6709\u521b\u901a\u6c14\", \"\u672f\u540e\u901a\u6c14\", \"\u547c\u5438\u673a\", \"\u63d2\u7ba1\", \"\u6c14\u7ba1\u63d2\u7ba1\", \"ventilator\", \"invasive ventilation\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u62d2\u7edd\", \"\u907f\u514d\", \"\u505c\u6b62\", \"\u64a4\u673a\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\n            \"\u65e0\u672f\u540e\u673a\u68b0\u901a\u6c14\u6307\u5f81\", \"\u672a\u4f7f\u7528\u547c\u5438\u673a\", \"\u62d2\u7edd\u547c\u5438\u673a\u6cbb\u7597\", \"\u672f\u540e\u65e0\u9700\u673a\u68b0\u901a\u6c14\",\n            \"\u81ea\u4e3b\u547c\u5438\u6062\u590d\u826f\u597d\uff0c\u65e0\u9700\u901a\u6c14\u652f\u6301\", \"\u62d4\u9664\u6c14\u7ba1\u63d2\u7ba1\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u6620\u5c04\u8868\uff08\u7528\u4e8e\u540e\u7eed\u65b9\u6cd5\u590d\u7528\uff09\n        self.extract_field_rules = {\n            \"\u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d+\u5426\u5b9a\u903b\u8f91\",\n                \"positive_patterns\": [\"\u672f\u540e\u4e88\u547c\u5438\u673a\u652f\u6301\", \"\u884c\u6709\u521b\u673a\u68b0\u901a\u6c14\", \"\u4e88\u4ee5\u6c14\u7ba1\u63d2\u7ba1\u63a5\u547c\u5438\u673a\u8f85\u52a9\u901a\u6c14\"],\n                \"negative_patterns\": [\"\u65e0\u9700\u673a\u68b0\u901a\u6c14\", \"\u672a\u4f7f\u7528\u547c\u5438\u673a\", \"\u62d2\u7edd\u547c\u5438\u673a\u6cbb\u7597\"]\n            },\n            \"\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d\",\n                \"keywords\": [\"\u6709\u521b\u673a\u68b0\u901a\u6c14\", \"\u65e0\u521b\u673a\u68b0\u901a\u6c14\", \"\u7ecf\u53e3\u6c14\u7ba1\u63d2\u7ba1\", \"\u7ecf\u9f3b\u6c14\u7ba1\u63d2\u7ba1\", \"\u9762\u7f69\u901a\u6c14\", \"BiPAP\", \"CPAP\"]\n            },\n            \"\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\": {\n                \"method\": \"\u6b63\u5219\u5339\u914d\",\n                \"patterns\": [\n                    r\"\u672f\u540e(\\d+)\u5c0f\u65f6\u5f00\u59cb\u673a\u68b0\u901a\u6c14\",\n                    r\"\u4e8e(\\d{4}-\\d{2}-\\d{2}\\s*\\d{2}:\\d{2})\u884c\u673a\u68b0\u901a\u6c14\",\n                    r\"\u624b\u672f\u7ed3\u675f\u540e\u7acb\u5373\u7ed9\u4e88(\u6709\u521b|\u65e0\u521b)\u901a\u6c14\",\n                    r\"\u672f\u540e\u5373\u523b\u63a5\u547c\u5438\u673a\"\n                ]\n            },\n            \"\u76f8\u5173\u624b\u672f\u4fe1\u606f\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d\",\n                \"keywords\": [\n                    \"\u5fc3\u810f\u624b\u672f\", \"\u80f8\u5916\u79d1\u624b\u672f\", \"\u8179\u90e8\u5927\u624b\u672f\", \"\u795e\u7ecf\u5916\u79d1\u624b\u672f\",\n                    \"\u5668\u5b98\u79fb\u690d\u672f\", \"\u4f53\u5916\u5faa\u73af\u624b\u672f\", \"\u5f00\u9885\u624b\u672f\", \"\u80ba\u53f6\u5207\u9664\u672f\"\n                ]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u672f\u540e\u6709\u521b\u673a\u68b0\u901a\u6c14\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"need_ventilation\": None,      # \u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\uff08True/False/None\uff09\n            \"ventilation_type\": None,      # \u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\n            \"start_time\": None,            # \u901a\u6c14\u5f00\u59cb\u65f6\u95f4\n            \"related_surgery\": None        # \u76f8\u5173\u624b\u672f\u4fe1\u606f\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u4e0d\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22648\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 8 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"need_ventilation\"] = False\n            return result\n\n        # 3. \u63d0\u53d6\u5404\u5b57\u6bb5\uff08\u6309\u5b50\u4efb\u52a12\u89c4\u5219\uff09\n        result[\"need_ventilation\"] = True\n\n        # \u63d0\u53d6\u201c\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\u201d\n        ventilation_keywords = self.extract_field_rules[\"\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\"][\"keywords\"]\n        for keyword in ventilation_keywords:\n            if keyword in text:\n                result[\"ventilation_type\"] = keyword\n                break\n\n        # \u63d0\u53d6\u201c\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\u201d\n        time_patterns = self.extract_field_rules[\"\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\"][\"patterns\"]\n        for pattern in time_patterns:\n            match = re.search(pattern, text)\n            if match:\n                result[\"start_time\"] = match.group(1) if match.lastindex else match.group(0)\n                break\n\n        # \u63d0\u53d6\u201c\u76f8\u5173\u624b\u672f\u4fe1\u606f\u201d\n        surgery_keywords = self.extract_field_rules[\"\u76f8\u5173\u624b\u672f\u4fe1\u606f\"][\"keywords\"]\n        for keyword in surgery_keywords:\n            if keyword in text:\n                result[\"related_surgery\"] = keyword\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u672f\u540e\u6709\u521b\u673a\u68b0\u901a\u6c14Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        need_ventilation_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"component-cs\"),\n                        \"code\": \"need-postop-ventilation\",\n                        \"display\": \"\u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u9700\u8981\u672f\u540e\u673a\u68b0\u901a\u6c14\"\n            }\n        }\n        if clinical_info[\"need_ventilation\"] is False:\n            need_ventilation_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('procedure-type-cs', 'ventilation-status-cs')}\", \"code\": \"no-need\", \"display\": \"\u4e0d\u9700\u8981\"}],\n                \"text\": \"\u4e0d\u9700\u8981\"\n            }\n        elif clinical_info[\"need_ventilation\"] is True:\n            need_ventilation_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('procedure-type-cs', 'ventilation-status-cs')}\", \"code\": \"need\", \"display\": \"\u9700\u8981\"}],\n                \"text\": \"\u9700\u8981\"\n            }\n        observation[\"component\"].append(need_ventilation_comp)\n\n        # \u6dfb\u52a0\u201c\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        if clinical_info[\"ventilation_type\"] is not None:\n            ventilation_type_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"component-cs\"),\n                            \"code\": \"ventilation-type\",\n                            \"display\": \"\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\"\n                        }\n                    ],\n                    \"text\": \"\u901a\u6c14\u65b9\u5f0f\uff08\u6709\u521b/\u65e0\u521b\uff09\"\n                },\n                \"valueCodeableConcept\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"ventilation-mode-cs\"),\n                            \"code\": clinical_info[\"ventilation_type\"].replace(\" \", \"-\").lower(),\n                            \"display\": clinical_info[\"ventilation_type\"]\n                        }\n                    ],\n                    \"text\": clinical_info[\"ventilation_type\"]\n                }\n            }\n            observation[\"component\"].append(ventilation_type_comp)\n\n        # \u6dfb\u52a0\u201c\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08dateTime\uff09\n        if clinical_info[\"start_time\"] is not None:\n            start_time_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"component-cs\"),\n                            \"code\": \"ventilation-start-time\",\n                            \"display\": \"\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"start_time\"]\n            }\n            observation[\"component\"].append(start_time_comp)\n\n        # \u6dfb\u52a0\u201c\u76f8\u5173\u624b\u672f\u4fe1\u606f\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        if clinical_info[\"related_surgery\"] is not None:\n            related_surgery_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"component-cs\"),\n                            \"code\": \"related-surgery\",\n                            \"display\": \"\u76f8\u5173\u624b\u672f\u4fe1\u606f\"\n                        }\n                    ],\n                    \"text\": \"\u76f8\u5173\u624b\u672f\u4fe1\u606f\"\n                },\n                \"valueCodeableConcept\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"procedure-type-cs\", \"surgery-type-cs\"),\n                            \"code\": clinical_info[\"related_surgery\"].replace(\" \", \"-\").lower(),\n                            \"display\": clinical_info[\"related_surgery\"]\n                        }\n                    ],\n                    \"text\": clinical_info[\"related_surgery\"]\n                }\n            }\n            observation[\"component\"].append(related_surgery_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u672f\u540e\u6709\u521b\u673a\u68b0\u901a\u6c14Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u672f\u540e\u6709\u521b\u673a\u68b0\u901a\u6c14\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08need_ventilation\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"need_ventilation\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s1811", "deepquery_id": "596444a0855a11f0a1004c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk755-MechanicalVentilationProcedure\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk755-MechanicalVentilationCodes\"\n        self.main_code = \"mechanical-ventilation\"\n        self.main_code_display = \"\u673a\u68b0\u901a\u6c14\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u673a\u68b0\u901a\u6c14\", \"\u547c\u5438\u673a\", \"\u4eba\u5de5\u901a\u6c14\", \"\u6c14\u7ba1\u63d2\u7ba1\", \"\u6c14\u7ba1\u5207\u5f00\", \"Ventilator\", \"MV\", \"\u4e0a\u547c\u5438\u673a\",\n                              \"\u4f7f\u7528\u547c\u5438\u673a\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u672a\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u62d2\u7edd\", \"\u7981\u5fcc\", \"\u907f\u514d\", \"\u4e0d\u7528\", \"\u672a\u89c1\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u65e0\u673a\u68b0\u901a\u6c14\u6307\u5f81\", \"\u672a\u884c\u673a\u68b0\u901a\u6c14\", \"\u62d2\u7edd\u547c\u5438\u673a\u6cbb\u7597\", \"\u60a3\u8005\u62d2\u7edd\u673a\u68b0\u901a\u6c14\", \"\u5bb6\u5c5e\u62d2\u7edd\u4e0a\u547c\u5438\u673a\",\n                                  \"\u65e0\u521b\u901a\u6c14\u66ff\u4ee3\", \"\u672a\u4f7f\u7528\u547c\u5438\u673a\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5411\u5173\u952e\u8bcd\u7528\u4e8e\u201c\u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\u201d\u5b57\u6bb5\u5224\u65ad\n        self.positive_keywords_for_acceptance = [\"\u884c\u673a\u68b0\u901a\u6c14\", \"\u4e88\u547c\u5438\u673a\u652f\u6301\", \"\u4f7f\u7528\u547c\u5438\u673a\", \"\u63a5\u547c\u5438\u673a\", \"\u4e0a\u673a\"]\n        self.negative_keywords_for_acceptance = [\"\u65e0\u673a\u68b0\u901a\u6c14\", \"\u672a\u884c\u673a\u68b0\u901a\u6c14\", \"\u62d2\u7edd\u547c\u5438\u673a\", \"\u4e0d\u8003\u8651\u547c\u5438\u673a\"]\n\n        # \u65f6\u95f4\u548c\u6301\u7eed\u65f6\u957f\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\n        self.start_time_patterns = [\n            r\"\u4e8e(\\d{4}-\\d{1,2}-\\d{1,2}\\s*\\d{1,2}:\\d{2})\u5f00\u59cb\u673a\u68b0\u901a\u6c14\",\n            r\"(\\d{4}-\\d{1,2}-\\d{1,2}\\s*\\d{1,2}:\\d{2})\u884c\u673a\u68b0\u901a\u6c14\",\n            r\"\u673a\u68b0\u901a\u6c14\u65f6\u95f4[\u4e3a\u662f]?(\\d{4}\u5e74\\d{1,2}\u6708\\d{1,2}\u65e5\\d{1,2}\u70b9\\d{2}\u5206)\"\n        ]\n        self.end_time_patterns = [\n            r\"\u4e8e(\\d{4}-\\d{1,2}-\\d{1,2}\\s*\\d{1,2}:\\d{2})\u64a4\u673a\",\n            r\"(\\d{4}-\\d{1,2}-\\d{1,2}\\s*\\d{1,2}:\\d{2})\u505c\u6b62\u673a\u68b0\u901a\u6c14\",\n            r\"\u547c\u5438\u673a\u4f7f\u7528\u81f3(\\d{4}-\\d{1,2}-\\d{1,2}\\s*\\d{1,2}:\\d{2})\"\n        ]\n        self.duration_patterns = [\n            r\"\u673a\u68b0\u901a\u6c14\u5171(\\d+(\\.\\d+)?)\u5c0f\u65f6\",\n            r\"\u547c\u5438\u673a\u4f7f\u7528\u65f6\u95f4[\u4e3a\u7ea6](\\d+(\\.\\d+)?)\u5929\",\n            r\"\u6301\u7eed\u673a\u68b0\u901a\u6c14(\\d+(\\.\\d+)?)\u5c0f\u65f6\",\n            r\"\u4e0a\u673a\u65f6\u95f4(\\d+(\\.\\d+)?)h\"\n        ]\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u673a\u68b0\u901a\u6c14\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"accepted\": None,  # \u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\uff08True/False/None\uff09\n            \"start_time\": None,  # \u5f00\u59cb\u65f6\u95f4\uff08\u5b57\u7b26\u4e32\u683c\u5f0f\uff09\n            \"end_time\": None,  # \u7ed3\u675f\u65f6\u95f4\uff08\u5b57\u7b26\u4e32\u683c\u5f0f\uff09\n            \"duration_hours\": None  # \u6301\u7eed\u65f6\u957f\uff08\u5c0f\u65f6\uff0c\u6d6e\u70b9\u6570\uff09\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u672a\u63a5\u53d7\u673a\u68b0\u901a\u6c14\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"accepted\"] = False\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\u903b\u8f91\n        result[\"accepted\"] = True\n\n        # \u5224\u65ad\u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\uff08\u57fa\u4e8e\u989d\u5916\u5173\u952e\u8bcd\uff09\n        positive_match = any(keyword in text for keyword in self.positive_keywords_for_acceptance)\n        negative_match = any(keyword in text for keyword in self.negative_keywords_for_acceptance)\n        if negative_match and not positive_match:\n            result[\"accepted\"] = False\n            return result  # \u82e5\u660e\u786e\u62d2\u7edd\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n\n        # \u63d0\u53d6\u5f00\u59cb\u65f6\u95f4\n        for pattern in self.start_time_patterns:\n            match = re.search(pattern, text)\n            if match:\n                result[\"start_time\"] = match.group(1).strip()\n                break\n\n        # \u63d0\u53d6\u7ed3\u675f\u65f6\u95f4\n        for pattern in self.end_time_patterns:\n            match = re.search(pattern, text)\n            if match:\n                result[\"end_time\"] = match.group(1).strip()\n                break\n\n        # \u63d0\u53d6\u6301\u7eed\u65f6\u957f\n        for pattern in self.duration_patterns:\n            match = re.search(pattern, text)\n            if match:\n                value_str = match.group(1)\n                try:\n                    value = float(value_str)\n                    # \u5982\u679c\u5355\u4f4d\u662f\u5929\uff0c\u8f6c\u6362\u4e3a\u5c0f\u65f6\n                    if \"\u5929\" in pattern or \"[\u4e3a\u7ea6]\" in pattern:\n                        value *= 24\n                    result[\"duration_hours\"] = round(value, 2)\n                except ValueError:\n                    continue\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[\n        str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u673a\u68b0\u901a\u6c14Procedure Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\u201d\u7ec4\u4ef6\n        acceptance_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"MechanicalVentilationCodes\", \"component-cs\"),\n                        \"code\": \"acceptance-of-mechanical-ventilation\",\n                        \"display\": \"\u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u63a5\u53d7\u673a\u68b0\u901a\u6c14\"\n            }\n        }\n        if clinical_info[\"accepted\"] is True:\n            acceptance_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": f\"{self.main_code_system.replace('MechanicalVentilationCodes', 'yes-no-cs')}\",\n                    \"code\": \"yes\",\n                    \"display\": \"\u662f\"\n                }],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"accepted\"] is False:\n            acceptance_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": f\"{self.main_code_system.replace('MechanicalVentilationCodes', 'yes-no-cs')}\",\n                    \"code\": \"no\",\n                    \"display\": \"\u5426\"\n                }],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(acceptance_comp)\n\n        # \u6dfb\u52a0\u201c\u673a\u68b0\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08\u5982\u679c\u5b58\u5728\uff09\n        if clinical_info[\"start_time\"]:\n            start_time_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"MechanicalVentilationCodes\", \"component-cs\"),\n                            \"code\": \"mechanical-ventilation-start-time\",\n                            \"display\": \"\u673a\u68b0\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u673a\u68b0\u901a\u6c14\u5f00\u59cb\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"start_time\"]\n            }\n            observation[\"component\"].append(start_time_comp)\n\n        # \u6dfb\u52a0\u201c\u673a\u68b0\u901a\u6c14\u7ed3\u675f\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08\u5982\u679c\u5b58\u5728\uff09\n        if clinical_info[\"end_time\"]:\n            end_time_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"MechanicalVentilationCodes\", \"component-cs\"),\n                            \"code\": \"mechanical-ventilation-end-time\",\n                            \"display\": \"\u673a\u68b0\u901a\u6c14\u7ed3\u675f\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u673a\u68b0\u901a\u6c14\u7ed3\u675f\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"end_time\"]\n            }\n            observation[\"component\"].append(end_time_comp)\n\n        # \u6dfb\u52a0\u201c\u673a\u68b0\u901a\u6c14\u6301\u7eed\u65f6\u957f\u201d\u7ec4\u4ef6\uff08\u5982\u679c\u5b58\u5728\uff09\n        if clinical_info[\"duration_hours\"] is not None:\n            duration_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"MechanicalVentilationCodes\", \"component-cs\"),\n                            \"code\": \"mechanical-ventilation-duration\",\n                            \"display\": \"\u673a\u68b0\u901a\u6c14\u6301\u7eed\u65f6\u957f\"\n                        }\n                    ],\n                    \"text\": \"\u673a\u68b0\u901a\u6c14\u6301\u7eed\u65f6\u957f\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"duration_hours\"],\n                    \"unit\": \"\u5c0f\u65f6\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"h\"\n                }\n            }\n            observation[\"component\"].append(duration_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]],\n                                           ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u673a\u68b0\u901a\u6c14Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u673a\u68b0\u901a\u6c14\u76f8\u5173\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08accepted\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"accepted\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s305", "deepquery_id": "d90a54a3860611f0ae344c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"\"  # observation_profile_url \u4e3a\u7a7a\uff0c\u6682\u4e0d\u8bbe\u7f6e\n        self.main_code_system = \"http://loinc.org\"\n        self.main_code = \"\"\n        self.main_code_display = \"\"\n        self.component_code_map = {}  # component_codes \u4e3a\u7a7a\uff0c\u6682\u4e0d\u8bbe\u7f6e\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\n            \"\u809d\u529f\u80fd\", \"\u80be\u529f\u80fd\", \"\u809d\u80be\u529f\u80fd\", \"\u8f6c\u6c28\u9176\", \"\u808c\u9150\", \"\u5c3f\u7d20\u6c2e\",\n            \"ALT\", \"AST\", \"Scr\", \"BUN\"\n        ]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n\n        self.negative_keywords = [\n            \"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\u89c1\", \"\u6b63\u5e38\", \"\u672a\u63d0\u53ca\", \"\u672a\u53d1\u73b0\", \"\u6392\u9664\"\n        ]  # \u5426\u5b9a\u5173\u952e\u8bcd\n\n        self.negative_patterns = [\n            \"\u809d\u529f\u80fd\u6b63\u5e38\", \"\u80be\u529f\u80fd\u6b63\u5e38\", \"\u5426\u8ba4\u809d\u529f\u80fd\u5f02\u5e38\", \"\u5426\u8ba4\u80be\u529f\u80fd\u5f02\u5e38\",\n            \"\u672a\u89c1\u660e\u663e\u5f02\u5e38\", \"\u809d\u529f\u80fd\u672a\u89c1\u5f02\u5e38\", \"\u80be\u529f\u80fd\u672a\u89c1\u5f02\u5e38\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5219\u63d0\u53d6\u89c4\u5219\u6620\u5c04\uff08\u5b57\u6bb5\u540d -> \u6b63\u5219\u89c4\u5219\u5217\u8868\uff09\n        self.regex_extraction_rules = {\n            \"\u8840\u808c\u9150(Scr)\": [\n                r\"\u8840\u808c\u9150[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*(\u03bcmol/L|umol/L|mg/dL|mg/dl)\",\n                r\"Scr[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*(\u03bcmol/L|umol/L|mg/dL|mg/dl)\"\n            ],\n            \"\u8840\u5c3f\u7d20\u6c2e(BUN)\": [\n                r\"\u8840\u5c3f\u7d20\u6c2e[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*(mmol/L|mg/dL|mg/dl)\",\n                r\"BUN[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*(mmol/L|mg/dL|mg/dl)\"\n            ],\n            \"\u8c37\u4e19\u8f6c\u6c28\u9176\uff08ALT\uff09\": [\n                r\"\u8c37\u4e19\u8f6c\u6c28\u9176[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*U/L\",\n                r\"ALT[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*U/L\"\n            ],\n            \"\u8c37\u8349\u8f6c\u6c28\u9176\uff08AST\uff09\": [\n                r\"\u8c37\u8349\u8f6c\u6c28\u9176[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*U/L\",\n                r\"AST[\u4e3a\u662f]?([0-9]+\\.?[0-9]*)\\s*U/L\"\n            ]\n        }\n\n        # \u5173\u952e\u8bcd\u5339\u914d\u5b57\u6bb5\u89c4\u5219\uff08\u5b57\u6bb5\u540d -> \u6b63\u5411\u5173\u952e\u8bcd, \u5426\u5b9a\u5173\u952e\u8bcd\uff09\n        self.keyword_extraction_rules = {\n            \"\u662f\u5426\u6709\u809d\u529f\u80fd\u5f02\u5e38\": {\n                \"positive\": [\"\u809d\u529f\u80fd\u5f02\u5e38\", \"\u8f6c\u6c28\u9176\u5347\u9ad8\", \"ALT\u5347\u9ad8\", \"AST\u5347\u9ad8\"],\n                \"negative\": [\"\u809d\u529f\u80fd\u6b63\u5e38\", \"\u5426\u8ba4\u809d\u529f\u80fd\u5f02\u5e38\"]\n            },\n            \"\u662f\u5426\u6709\u80be\u529f\u80fd\u5f02\u5e38\": {\n                \"positive\": [\"\u80be\u529f\u80fd\u5f02\u5e38\", \"\u808c\u9150\u5347\u9ad8\", \"\u5c3f\u7d20\u6c2e\u5347\u9ad8\", \"Scr\u5347\u9ad8\", \"BUN\u5347\u9ad8\"],\n                \"negative\": [\"\u80be\u529f\u80fd\u6b63\u5e38\", \"\u5426\u8ba4\u80be\u529f\u80fd\u5f02\u5e38\"]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u809d\u80be\u529f\u80fd\u72b6\u6001\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"\u8840\u808c\u9150(Scr)\": None,\n            \"\u8840\u5c3f\u7d20\u6c2e(BUN)\": None,\n            \"\u8c37\u4e19\u8f6c\u6c28\u9176\uff08ALT\uff09\": None,\n            \"\u8c37\u8349\u8f6c\u6c28\u9176\uff08AST\uff09\": None,\n            \"\u662f\u5426\u6709\u809d\u529f\u80fd\u5f02\u5e38\": None,\n            \"\u662f\u5426\u6709\u80be\u529f\u80fd\u5f02\u5e38\": None\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u5f02\u5e38\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n\n        def is_negated(neg_word: str, core_keywords_list: list, max_distance: int = 5) -> bool:\n            neg_positions = [m.start() for m in re.finditer(re.escape(neg_word), text)]\n            core_positions = [m.start() for kw in core_keywords_list for m in re.finditer(re.escape(kw), text)]\n            return any(abs(n - c) <= max_distance for n in neg_positions for c in core_positions)\n\n        context_negated = any(is_negated(neg_kw, self.core_keywords) for neg_kw in self.negative_keywords)\n\n        if has_explicit_negative or context_negated:\n            result[\"\u662f\u5426\u6709\u809d\u529f\u80fd\u5f02\u5e38\"] = False\n            result[\"\u662f\u5426\u6709\u80be\u529f\u80fd\u5f02\u5e38\"] = False\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\u903b\u8f91\n\n        # \u6b63\u5219\u5339\u914d\u6570\u503c\u578b\u6307\u6807\n        for field_name, patterns in self.regex_extraction_rules.items():\n            for pattern in patterns:\n                match = re.search(pattern, text)\n                if match:\n                    try:\n                        value = float(match.group(1))\n                        unit = match.group(2)\n                        result[field_name] = {\"value\": value, \"unit\": unit}\n                        break\n                    except ValueError:\n                        continue\n\n        # \u5173\u952e\u8bcd\u5339\u914d\u5e03\u5c14\u578b\u5224\u65ad\u5b57\u6bb5\n        for field_name, rules in self.keyword_extraction_rules.items():\n            positive_keywords = rules[\"positive\"]\n            negative_keywords = rules[\"negative\"]\n\n            # \u5148\u770b\u662f\u5426\u660e\u786e\u5426\u5b9a\n            if any(neg_kw in text for neg_kw in negative_keywords):\n                result[field_name] = False\n            # \u518d\u770b\u662f\u5426\u6709\u6b63\u5411\u5173\u952e\u8bcd\n            elif any(pos_kw in text for pos_kw in positive_keywords):\n                result[field_name] = True\n            # \u82e5\u90fd\u65e0\uff0c\u5219\u4fdd\u6301None\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u809d\u80be\u529f\u80fd\u72b6\u6001Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile] if self.fhir_observation_profile else []\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": \"\u809d\u80be\u529f\u80fd\u72b6\u6001\"\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6620\u5c04\u5b57\u6bb5\u5230LOINC\u7f16\u7801\u548c\u663e\u793a\u540d\u79f0\uff08\u6a21\u62dfcomponent_codes\uff09\n        field_to_component = {\n            \"\u8840\u808c\u9150(Scr)\": {\n                \"code\": \"2160-0\",\n                \"display\": \"Creatinine [Mass/volume] in Serum or Plasma\",\n                \"unit_system\": \"http://unitsofmeasure.org\",\n                \"unit_code\": \"umol/L\"\n            },\n            \"\u8840\u5c3f\u7d20\u6c2e(BUN)\": {\n                \"code\": \"3094-0\",\n                \"display\": \"Urea nitrogen [Mass/volume] in Serum or Plasma\",\n                \"unit_system\": \"http://unitsofmeasure.org\",\n                \"unit_code\": \"mmol/L\"\n            },\n            \"\u8c37\u4e19\u8f6c\u6c28\u9176\uff08ALT\uff09\": {\n                \"code\": \"1742-6\",\n                \"display\": \"Alanine aminotransferase [Enzymatic activity/volume] in Serum or Plasma\",\n                \"unit_system\": \"http://unitsofmeasure.org\",\n                \"unit_code\": \"U/L\"\n            },\n            \"\u8c37\u8349\u8f6c\u6c28\u9176\uff08AST\uff09\": {\n                \"code\": \"1920-8\",\n                \"display\": \"Aspartate aminotransferase [Enzymatic activity/volume] in Serum or Plasma\",\n                \"unit_system\": \"http://unitsofmeasure.org\",\n                \"unit_code\": \"U/L\"\n            },\n            \"\u662f\u5426\u6709\u809d\u529f\u80fd\u5f02\u5e38\": {\n                \"code\": \"40037-9\",\n                \"display\": \"Liver abnormality\",\n                \"is_boolean\": True\n            },\n            \"\u662f\u5426\u6709\u80be\u529f\u80fd\u5f02\u5e38\": {\n                \"code\": \"40038-7\",\n                \"display\": \"Renal abnormality\",\n                \"is_boolean\": True\n            }\n        }\n\n        # \u6784\u5efacomponent\u6570\u7ec4\n        for field_name, extracted_value in clinical_info.items():\n            mapping = field_to_component.get(field_name)\n            if not mapping:\n                continue\n\n            comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": mapping[\"code\"],\n                            \"display\": mapping[\"display\"]\n                        }\n                    ],\n                    \"text\": mapping[\"display\"]\n                }\n            }\n\n            if \"is_boolean\" in mapping and mapping[\"is_boolean\"]:\n                comp[\"valueCodeableConcept\"] = {\n                    \"coding\": [{\n                        \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0136\",\n                        \"code\": \"Y\" if extracted_value else \"N\",\n                        \"display\": \"Yes\" if extracted_value else \"No\"\n                    }],\n                    \"text\": \"\u662f\" if extracted_value else \"\u5426\"\n                } if extracted_value is not None else {}\n            elif isinstance(extracted_value, dict) and \"value\" in extracted_value:\n                comp[\"valueQuantity\"] = {\n                    \"value\": extracted_value[\"value\"],\n                    \"unit\": extracted_value[\"unit\"],\n                    \"system\": mapping.get(\"unit_system\", \"\"),\n                    \"code\": mapping.get(\"unit_code\", \"\")\n                }\n\n            observation[\"component\"].append(comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u809d\u80be\u529f\u80fdObservation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u809d\u80be\u529f\u80fd\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if all(v is None for v in clinical_info.values()):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s116", "deepquery_id": "c49aa437860611f0bef14c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk835-OrganOrTissueStatus\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk835-CoagulationTestCS\"\n        self.main_code = \"coagulation_function\"\n        self.main_code_display = \"\u51dd\u8840\u529f\u80fd\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"coagulation-abnormality-status\": {\"display\": \"\u51dd\u8840\u529f\u80fd\u662f\u5426\u5f02\u5e38\", \"value_type\": \"CodeableConcept\"},\n            \"abnormal-indicators\": {\"display\": \"\u5177\u4f53\u5f02\u5e38\u6307\u6807\uff08\u5982PT\u3001APTT\u3001INR\uff09\", \"value_type\": \"string\"},\n            \"quantitative-value\": {\"display\": \"\u5b9a\u91cf\u6570\u503c\", \"value_type\": \"Quantity\"},\n            \"reference-range\": {\"display\": \"\u53c2\u8003\u8303\u56f4\", \"value_type\": \"string\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u51dd\u8840\u529f\u80fd\", \"\u51dd\u8840\u5f02\u5e38\", \"\u51dd\u8840\u969c\u788d\", \"PT\u5ef6\u957f\", \"APTT\u5ef6\u957f\", \"INR\u5347\u9ad8\", \"\u51dd\u8840\u6307\u6807\u5f02\u5e38\", \"\u51fa\u51dd\u8840\u529f\u80fd\u969c\u788d\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u6b63\u5e38\", \"\u672a\u89c1\u5f02\u5e38\", \"\u672a\u63d0\u793a\", \"\u6392\u9664\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\n            \"\u51dd\u8840\u529f\u80fd\u6b63\u5e38\", \"\u65e0\u51dd\u8840\u529f\u80fd\u5f02\u5e38\", \"\u5426\u8ba4\u51dd\u8840\u969c\u788d\", \"\u672a\u89c1\u660e\u663e\u51dd\u8840\u5f02\u5e38\",\n            \"\u51dd\u8840\u6307\u6807\u672a\u89c1\u660e\u663e\u5f02\u5e38\", \"PT\u3001APTT\u6b63\u5e38\", \"INR\u5728\u6b63\u5e38\u8303\u56f4\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\n        self.quantitative_regex_patterns = [\n            r'(PT|APTT|INR)[^\\d]{0,5}(\\d+\\.?\\d*)\\s*(\u79d2|s|sec|Sec|SEC|IU|INR)?',\n            r'(\\d+\\.?\\d*)\\s*(\u79d2|s|sec|Sec|SEC|IU|INR)[^\\d]{0,5}(PT|APTT|INR)'\n        ]\n        self.reference_range_patterns = [\n            r'\u53c2\u8003\u8303\u56f4[:\uff1a]?\\s*([\\d\\.]+[-~][\\d\\.]+)\\s*(\u79d2|s|IU|INR)?',\n            r'\u6b63\u5e38\u503c[:\uff1a]?\\s*([\\d\\.]+[-~][\\d\\.]+)\\s*(\u79d2|s|IU|INR)?'\n        ]\n\n        # \u63d0\u53d6\u5b57\u6bb5\u5217\u8868\uff08\u7528\u4e8e\u540e\u7eed\u65b9\u6cd5\u590d\u7528\uff09\n        self.extract_fields = [\"\u51dd\u8840\u529f\u80fd\u662f\u5426\u5f02\u5e38\", \"\u5177\u4f53\u5f02\u5e38\u6307\u6807\uff08\u5982PT\u3001APTT\u3001INR\uff09\", \"\u5b9a\u91cf\u6570\u503c\", \"\u53c2\u8003\u8303\u56f4\"]\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u51dd\u8840\u529f\u80fd\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"abnormal_status\": None,      # \u51dd\u8840\u529f\u80fd\u662f\u5426\u5f02\u5e38 (True/False/None)\n            \"abnormal_indicators\": None,  # \u5177\u4f53\u5f02\u5e38\u6307\u6807\uff08\u5982PT\u3001APTT\u3001INR\uff09\n            \"quantitative_values\": [],    # \u5b9a\u91cf\u6570\u503c\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f{\"indicator\": \"PT\", \"value\": 12.3, \"unit\": \"\u79d2\"}\n            \"reference_ranges\": []         # \u53c2\u8003\u8303\u56f4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u5b57\u7b26\u4e32\u5982\"10-14\u79d2\"\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u51dd\u8840\u529f\u80fd\u5f02\u5e38\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"abnormal_status\"] = False\n            return result\n\n        # 3. \u6709\u51dd\u8840\u529f\u80fd\u5f02\u5e38\uff1a\u63d0\u53d6\u5404\u5b57\u6bb5\uff08\u6309\u5b50\u4efb\u52a12\u89c4\u5219\uff09\n        result[\"abnormal_status\"] = True\n\n        # \u63d0\u53d6\u5177\u4f53\u5f02\u5e38\u6307\u6807\uff08\u5173\u952e\u8bcd\u5339\u914d\uff09\n        indicator_keywords = [\"PT\", \"APTT\", \"INR\", \"\u51dd\u8840\u9176\u539f\u65f6\u95f4\", \"\u6d3b\u5316\u90e8\u5206\u51dd\u8840\u6d3b\u9176\u65f6\u95f4\", \"\u56fd\u9645\u6807\u51c6\u5316\u6bd4\u503c\"]\n        found_indicators = [kw for kw in indicator_keywords if kw in text]\n        if found_indicators:\n            result[\"abnormal_indicators\"] = \", \".join(found_indicators)\n\n        # \u63d0\u53d6\u5b9a\u91cf\u6570\u503c\uff08\u6b63\u5219\u5339\u914d\uff09\n        for pattern in self.quantitative_regex_patterns:\n            matches = re.findall(pattern, text)\n            for match in matches:\n                if len(match) == 3:\n                    # \u683c\u5f0f\uff1a(\u6307\u6807, \u6570\u503c, \u5355\u4f4d)\n                    indicator, value_str, unit = match\n                    try:\n                        value = float(value_str)\n                        result[\"quantitative_values\"].append({\n                            \"indicator\": indicator,\n                            \"value\": value,\n                            \"unit\": unit.strip() if unit else \"\"\n                        })\n                    except ValueError:\n                        continue\n\n        # \u63d0\u53d6\u53c2\u8003\u8303\u56f4\uff08\u6b63\u5219\u5339\u914d\uff09\n        for pattern in self.reference_range_patterns:\n            matches = re.findall(pattern, text)\n            for match in matches:\n                if isinstance(match, tuple) and len(match) >= 1:\n                    range_text = match[0]\n                    unit = match[1].strip() if len(match) > 1 and match[1] else \"\"\n                    full_range = f\"{range_text}{unit}\" if unit else range_text\n                    result[\"reference_ranges\"].append(full_range)\n                elif isinstance(match, str):\n                    result[\"reference_ranges\"].append(match)\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u51dd\u8840\u529f\u80fdProfile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]  # \u590d\u7528__init__\u4e2d\u7684FHIR Profile\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u51dd\u8840\u529f\u80fd\u662f\u5426\u5f02\u5e38\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        abnormal_status_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"CoagulationTestCS\", \"component-cs\"),\n                        \"code\": \"coagulation-abnormality-status\",\n                        \"display\": self.component_code_map[\"coagulation-abnormality-status\"][\"display\"]\n                    }\n                ],\n                \"text\": self.component_code_map[\"coagulation-abnormality-status\"][\"display\"]\n            }\n        }\n        if clinical_info[\"abnormal_status\"] is False:\n            abnormal_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('CoagulationTestCS', 'coagulation-status-cs')}\", \"code\": \"no-abnormality\", \"display\": \"\u65e0\u51dd\u8840\u529f\u80fd\u5f02\u5e38\"}],\n                \"text\": \"\u65e0\u51dd\u8840\u529f\u80fd\u5f02\u5e38\"\n            }\n        elif clinical_info[\"abnormal_status\"] is True:\n            abnormal_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('CoagulationTestCS', 'coagulation-status-cs')}\", \"code\": \"abnormal\", \"display\": \"\u5b58\u5728\u51dd\u8840\u529f\u80fd\u5f02\u5e38\"}],\n                \"text\": \"\u5b58\u5728\u51dd\u8840\u529f\u80fd\u5f02\u5e38\"\n            }\n        observation[\"component\"].append(abnormal_status_comp)\n\n        # \u82e5\u6709\u5177\u4f53\u5f02\u5e38\u6307\u6807\uff0c\u5219\u6dfb\u52a0\u8be5\u7ec4\u4ef6\uff08String\uff09\n        if clinical_info.get(\"abnormal_indicators\"):\n            indicator_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"CoagulationTestCS\", \"component-cs\"),\n                            \"code\": \"abnormal-indicators\",\n                            \"display\": self.component_code_map[\"abnormal-indicators\"][\"display\"]\n                        }\n                    ],\n                    \"text\": self.component_code_map[\"abnormal-indicators\"][\"display\"]\n                },\n                \"valueString\": clinical_info[\"abnormal_indicators\"]\n            }\n            observation[\"component\"].append(indicator_comp)\n\n        # \u82e5\u6709\u5b9a\u91cf\u6570\u503c\uff0c\u5219\u9010\u4e2a\u6dfb\u52a0\u7ec4\u4ef6\uff08Quantity\uff09\n        for q_val in clinical_info.get(\"quantitative_values\", []):\n            quant_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"CoagulationTestCS\", \"component-cs\"),\n                            \"code\": \"quantitative-value\",\n                            \"display\": self.component_code_map[\"quantitative-value\"][\"display\"]\n                        }\n                    ],\n                    \"text\": self.component_code_map[\"quantitative-value\"][\"display\"]\n                },\n                \"valueQuantity\": {\n                    \"value\": q_val[\"value\"],\n                    \"unit\": q_val[\"unit\"],\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": q_val[\"unit\"] if q_val[\"unit\"] in [\"s\", \"sec\", \"INR\", \"IU\"] else \"\"\n                }\n            }\n            observation[\"component\"].append(quant_comp)\n\n        # \u82e5\u6709\u53c2\u8003\u8303\u56f4\uff0c\u5219\u9010\u4e2a\u6dfb\u52a0\u7ec4\u4ef6\uff08String\uff09\n        for ref_range in clinical_info.get(\"reference_ranges\", []):\n            range_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"CoagulationTestCS\", \"component-cs\"),\n                            \"code\": \"reference-range\",\n                            \"display\": self.component_code_map[\"reference-range\"][\"display\"]\n                        }\n                    ],\n                    \"text\": self.component_code_map[\"reference-range\"][\"display\"]\n                },\n                \"valueString\": ref_range\n            }\n            observation[\"component\"].append(range_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u51dd\u8840\u529f\u80fdObservation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u51dd\u8840\u529f\u80fd\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08abnormal_status\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"abnormal_status\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s352", "deepquery_id": "20ecce93860711f0a78e4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk875-intracranialhypertension-profile\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk875-intracranialhypertension-cs\"\n        self.main_code = \"intracranial-hypertension\"\n        self.main_code_display = \"\u9885\u5185\u9ad8\u538b\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {}\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\n            \"\u9885\u5185\u538b\u589e\u9ad8\", \"\u9885\u5185\u9ad8\u538b\", \"\u610f\u8bc6\u969c\u788d\", \"\u610f\u8bc6\u4e0d\u6e05\",\n            \"\u660f\u8ff7\", \"\u660f\u7761\", \"\u8c35\u5984\", \"\u8e81\u52a8\", \"\u683c\u62c9\u65af\u54e5\u8bc4\u5206\u964d\u4f4e\", \"GCS\u8bc4\u5206\u4e0b\u964d\"\n        ]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n\n        self.negative_keywords = [\n            \"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\u89c1\", \"\u672a\u63d0\u53ca\", \"\u6392\u9664\", \"\u6b63\u5e38\",\n            \"\u6e05\u9192\", \"\u6e05\u695a\", \"\u597d\u8f6c\"\n        ]  # \u5426\u5b9a\u5173\u952e\u8bcd\n\n        self.negative_patterns = [\n            \"\u65e0\u9885\u5185\u9ad8\u538b\u8868\u73b0\", \"\u5426\u8ba4\u9885\u5185\u9ad8\u538b\", \"\u65e0\u660e\u663e\u610f\u8bc6\u969c\u788d\",\n            \"\u610f\u8bc6\u72b6\u6001\u5c1a\u53ef\", \"\u795e\u5fd7\u6e05\u695a\", \"\u683c\u62c9\u65af\u54e5\u8bc4\u5206\u6b63\u5e38\",\n            \"\u6392\u9664\u9885\u5185\u9ad8\u538b\u53ef\u80fd\", \"\u60a3\u8005\u610f\u8bc6\u6e05\u6670\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5411\u5173\u952e\u8bcd\u96c6\u5408\uff1a\u7528\u4e8e\u5404\u5b57\u6bb5\u7684\u5177\u4f53\u5339\u914d\n        self.field_positive_keywords = {\n            \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\": [\"\u9885\u5185\u538b\u5347\u9ad8\", \"\u9885\u5185\u9ad8\u538b\", \"\u8111\u538b\u9ad8\"],\n            \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\": [\"\u610f\u8bc6\u6a21\u7cca\", \"\u610f\u8bc6\u969c\u788d\", \"\u795e\u5fd7\u4e0d\u6e05\", \"\u53cd\u5e94\u8fdf\u949d\", \"\u55dc\u7761\", \"\u660f\u7761\", \"\u660f\u8ff7\"]\n        }\n\n        # \u5426\u5b9a\u5173\u952e\u8bcd\u96c6\u5408\uff1a\u7528\u4e8e\u5404\u5b57\u6bb5\u7684\u5426\u5b9a\u5224\u65ad\n        self.field_negative_keywords = {\n            \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\": [\"\u65e0\u9885\u5185\u9ad8\u538b\", \"\u5426\u8ba4\u9885\u5185\u9ad8\u538b\", \"\u6392\u9664\u9885\u5185\u9ad8\u538b\"],\n            \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\": [\"\u610f\u8bc6\u6e05\u695a\", \"\u795e\u5fd7\u6e05\", \"\u5426\u8ba4\u610f\u8bc6\u969c\u788d\"]\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u9885\u5185\u9ad8\u538b\u6216\u610f\u8bc6\u4e0d\u6e05\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"has_intracranial_hypertension\": None,  # True/False/None\n            \"has_consciousness_disorder\": None      # True/False/None\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5168\u5c40\u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u76f8\u5173\u95ee\u9898\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"has_intracranial_hypertension\"] = False\n            result[\"has_consciousness_disorder\"] = False\n            return result\n\n        # 3. \u5b57\u6bb5\u7ea7\u63d0\u53d6\uff1a\u9010\u5b57\u6bb5\u5224\u65ad\u662f\u5426\u5b58\u5728\u6b63\u5411\u8bc1\u636e\u4e14\u65e0\u5c40\u90e8\u5426\u5b9a\n        for field_name in [\"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\", \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\"]:\n            positive_keywords = self.field_positive_keywords.get(field_name, [])\n            negative_keywords = self.field_negative_keywords.get(field_name, [])\n\n            # \u5c40\u90e8\u5426\u5b9a\u5224\u65ad\n            has_local_negative = any(neg_kw in text for neg_kw in negative_keywords)\n            if not has_local_negative:\n                # \u68c0\u67e5\u662f\u5426\u6709\u6b63\u5411\u5173\u952e\u8bcd\n                if any(pos_kw in text for pos_kw in positive_keywords):\n                    if field_name == \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\":\n                        result[\"has_intracranial_hypertension\"] = True\n                    elif field_name == \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\":\n                        result[\"has_consciousness_disorder\"] = True\n                else:\n                    # \u65e0\u6b63\u5411\u5173\u952e\u8bcd\u4e5f\u65e0\u5c40\u90e8\u5426\u5b9a\u65f6\uff0c\u9ed8\u8ba4\u4e3aFalse\uff08\u672a\u63d0\u53ca\uff09\n                    if field_name == \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\":\n                        result[\"has_intracranial_hypertension\"] = result[\"has_intracranial_hypertension\"] or False\n                    elif field_name == \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\":\n                        result[\"has_consciousness_disorder\"] = result[\"has_consciousness_disorder\"] or False\n            else:\n                # \u6709\u5c40\u90e8\u5426\u5b9a\u76f4\u63a5\u6807\u8bb0\u4e3aFalse\n                if field_name == \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\":\n                    result[\"has_intracranial_hypertension\"] = False\n                elif field_name == \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\":\n                    result[\"has_consciousness_disorder\"] = False\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u9885\u5185\u9ad8\u538bObservation Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\u201d\u7ec4\u4ef6\n        hypertension_status_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"intracranialhypertension-cs\", \"component-cs\"),\n                        \"code\": \"presence-of-intracranial-hypertension\",\n                        \"display\": \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u5b58\u5728\u9885\u5185\u9ad8\u538b\"\n            }\n        }\n        if clinical_info[\"has_intracranial_hypertension\"] is True:\n            hypertension_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": \"http://terminology.hl7.org/CodeSystem/v2-0136\", \"code\": \"Y\", \"display\": \"\u662f\"}],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"has_intracranial_hypertension\"] is False:\n            hypertension_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": \"http://terminology.hl7.org/CodeSystem/v2-0136\", \"code\": \"N\", \"display\": \"\u5426\"}],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(hypertension_status_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\u201d\u7ec4\u4ef6\n        consciousness_status_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"intracranialhypertension-cs\", \"component-cs\"),\n                        \"code\": \"presence-of-consciousness-disorder\",\n                        \"display\": \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u5b58\u5728\u610f\u8bc6\u4e0d\u6e05\"\n            }\n        }\n        if clinical_info[\"has_consciousness_disorder\"] is True:\n            consciousness_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": \"http://terminology.hl7.org/CodeSystem/v2-0136\", \"code\": \"Y\", \"display\": \"\u662f\"}],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"has_consciousness_disorder\"] is False:\n            consciousness_status_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": \"http://terminology.hl7.org/CodeSystem/v2-0136\", \"code\": \"N\", \"display\": \"\u5426\"}],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(consciousness_status_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u9885\u5185\u9ad8\u538b\u6216\u610f\u8bc6\u4e0d\u6e05Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u9885\u5185\u9ad8\u538b\u6216\u610f\u8bc6\u4e0d\u6e05\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u4e24\u4e2a\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if (clinical_info.get(\"has_intracranial_hypertension\") is None and\n                clinical_info.get(\"has_consciousness_disorder\") is None):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s29877", "deepquery_id": "a835da9c85a511f0b5064c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk805-SmokingStatusObservation\"\n        self.main_code_system = \"http://loinc.org\"\n        self.main_code = \"72166-2\"\n        self.main_code_display = \"Tobacco smoking status\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"63586-4\": {\"display\": \"Duration since stopped smoking\", \"value_type\": \"Quantity\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u5438\u70df\", \"cigarettes\", \"\u70df\u53f2\", \"\u5377\u70df\", \"\u70df\u8349\", \"\u62bd\u70df\", \"\u6212\u70df\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u62d2\u7edd\", \"\u6212\", \"\u7981\", \"\u4ece\u4e0d\", \"never\", \"quit\", \"stopped\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\n            \"\u65e0\u5438\u70df\u53f2\", \"\u4e0d\u5438\u70df\", \"\u5df2\u6212\u70df\", \"\u6212\u70df\", \"\u7981\u70df\", \"\u62d2\u7edd\u5438\u70df\",\n            \"\u5426\u8ba4\u5438\u70df\", \"\u4ece\u4e0d\u5438\u70df\", \"never smoked\", \"quit smoking\", \"stopped smoking\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u5b57\u6bb5\u63d0\u53d6\u89c4\u5219\n        self.field_extraction_rules = {\n            \"\u5438\u70df\u72b6\u6001\": {\n                \"method\": \"\u5173\u952e\u8bcd\u5339\u914d+\u5426\u5b9a\u903b\u8f91\",\n                \"positive_keywords\": [\"currently smoke\", \"\u5438\u70df\u4e2d\", \"\u4ecd\u5728\u5438\u70df\", \"\u6709\u5438\u70df\u4e60\u60ef\", \"\u5438\u70df\u53f2\"],\n                \"negative_keywords\": [\"\u5df2\u6212\u70df\", \"\u6212\u70df\", \"\u4e0d\u5438\u70df\", \"\u5426\u8ba4\u5438\u70df\", \"\u65e0\u5438\u70df\u53f2\"]\n            },\n            \"\u6212\u70df\u6301\u7eed\u65f6\u95f4\": {\n                \"method\": \"\u6b63\u5219\u5339\u914d\",\n                \"patterns\": [\n                    r'\u6212\u70df(\\d+)\u5e74',\n                    r'\u5df2\u6212\u70df(\\d+)\u5e74',\n                    r'\u6212\u70df\u65f6\u95f4[\u4e3a\u7ea6]?(\\d+)\u5e74',\n                    r'quit smoking for (\\d+) years',\n                    r'stopped smoking (\\d+) years ago'\n                ]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u5438\u70df\u6216\u6212\u70df<2\u5e74\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"smoking_status\": None,      # \u5438\u70df\u72b6\u6001\uff1astr or None\n            \"cessation_duration\": None   # \u6212\u70df\u6301\u7eed\u65f6\u95f4\uff08\u5e74\uff09\uff1aint or None\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u5438\u70df\u53f2\u6216\u9700\u8fdb\u4e00\u6b65\u5224\u65ad\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\u903b\u8f91\n        # \u63d0\u53d6\u5438\u70df\u72b6\u6001\n        positive_keywords = self.field_extraction_rules[\"\u5438\u70df\u72b6\u6001\"][\"positive_keywords\"]\n        negative_keywords = self.field_extraction_rules[\"\u5438\u70df\u72b6\u6001\"][\"negative_keywords\"]\n\n        if any(keyword in text for keyword in positive_keywords):\n            result[\"smoking_status\"] = \"\u76ee\u524d\u5438\u70df\"\n        elif any(keyword in text for keyword in negative_keywords) or has_explicit_negative or has_context_negative:\n            result[\"smoking_status\"] = \"\u5df2\u6212\u70df\"\n\n        # \u82e5\u4ecd\u65e0\u6cd5\u786e\u5b9a\u5438\u70df\u72b6\u6001\uff0c\u9ed8\u8ba4\u6839\u636e\u4e0a\u4e0b\u6587\u5224\u65ad\n        if result[\"smoking_status\"] is None:\n            if \"\u5438\u70df\" in text and not (has_explicit_negative or has_context_negative):\n                result[\"smoking_status\"] = \"\u76ee\u524d\u5438\u70df\"\n            elif \"\u6212\u70df\" in text:\n                result[\"smoking_status\"] = \"\u5df2\u6212\u70df\"\n\n        # \u63d0\u53d6\u6212\u70df\u6301\u7eed\u65f6\u95f4\uff08\u6b63\u5219\u5339\u914d\uff09\n        cessation_patterns = self.field_extraction_rules[\"\u6212\u70df\u6301\u7eed\u65f6\u95f4\"][\"patterns\"]\n        for pattern in cessation_patterns:\n            match = re.search(pattern, text)\n            if match:\n                try:\n                    result[\"cessation_duration\"] = int(match.group(1))\n                    break\n                except ValueError:\n                    continue\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u5438\u70df\u72b6\u6001Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        \n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u8bbe\u7f6evalueCodeableConcept\u4e3a\u4e3b\u7801\u503c\uff08\u5438\u70df\u72b6\u6001\uff09\n        smoking_status = clinical_info.get(\"smoking_status\")\n        if smoking_status == \"\u76ee\u524d\u5438\u70df\":\n            observation[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": \"http://snomed.info/sct\",\n                    \"code\": \"449868002\",\n                    \"display\": \"Current every day smoker\"\n                }],\n                \"text\": \"\u76ee\u524d\u6bcf\u5929\u5438\u70df\"\n            }\n        elif smoking_status == \"\u5df2\u6212\u70df\":\n            # \u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u201c\u6212\u70df<2\u5e74\u201d\n            cessation_years = clinical_info.get(\"cessation_duration\")\n            if cessation_years is not None and cessation_years < 2:\n                code_val = \"77176002\"\n                display_val = \"Smoker, current status unknown, last smoked within the past 2 years\"\n            else:\n                code_val = \"8517006\"\n                display_val = \"Ex-smoker\"\n            observation[\"valueCodeableConcept\"] = {\n                \"coding\": [{\n                    \"system\": \"http://snomed.info/sct\",\n                    \"code\": code_val,\n                    \"display\": display_val\n                }],\n                \"text\": display_val\n            }\n\n        # \u6dfb\u52a0\u201c\u6212\u70df\u6301\u7eed\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08\u5982\u679c\u5b58\u5728\uff09\n        cessation_duration = clinical_info.get(\"cessation_duration\")\n        if cessation_duration is not None:\n            component = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://loinc.org\",\n                            \"code\": \"63586-4\",\n                            \"display\": \"Duration since stopped smoking\"\n                        }\n                    ],\n                    \"text\": \"Duration since stopped smoking\"\n                },\n                \"valueQuantity\": {\n                    \"value\": cessation_duration,\n                    \"unit\": \"\u5e74\",\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": \"a\"\n                }\n            }\n            observation[\"component\"].append(component)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u5438\u70df\u72b6\u6001Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n            \n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u5438\u70df\u72b6\u6001\u53ca\u6212\u70df\u5e74\u9650\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n            \n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08smoking_status\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"smoking_status\") is None:\n                continue\n            \n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n            \n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s29420", "deepquery_id": "88c441cc829011f09e6e4c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk565-symptomobservation\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk565-symptomtype-cs\"\n        self.main_code = \"diarrhea \u6216 constipation\"\n        self.main_code_display = \"\u8179\u6cfb \u6216 \u4fbf\u79d8\"\n        self.component_code_map = {}  # \u5f53\u524d\u65e0\u7ec4\u4ef6\u5b57\u6bb5\uff0c\u4fdd\u7559\u7a7a\u5b57\u5178\u4ee5\u5907\u540e\u7eed\u4f7f\u7528\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u8179\u6cfb\", \"\u4fbf\u79d8\", \"\u6392\u4fbf\u56f0\u96be\", \"\u5927\u4fbf\u5e72\u7ed3\", \"\u7a00\u4fbf\", \"\u6c34\u6837\u4fbf\", \"\u91cc\u6025\u540e\u91cd\", \"\u6392\u4fbf\u4e60\u60ef\u6539\u53d8\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u672a\u89c1\", \"\u6392\u9664\", \"\u6b63\u5e38\", \"\u7f13\u89e3\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u65e0\u8179\u6cfb\", \"\u65e0\u4fbf\u79d8\", \"\u5426\u8ba4\u8179\u6cfb\", \"\u5426\u8ba4\u4fbf\u79d8\", \"\u672a\u89c1\u660e\u663e\u8179\u6cfb\", \"\u672a\u8bc9\u8179\u6cfb\", \"\u6392\u4fbf\u6b63\u5e38\", \"\u65e0\u6392\u4fbf\u5f02\u5e38\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u5b57\u6bb5\u7ea7\u5173\u952e\u8bcd\u6620\u5c04\uff08\u7528\u4e8e\u5b57\u6bb5\u503c\u63d0\u53d6\uff09\n        self.field_extraction_keywords = {\n            \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\": {\n                \"positive\": [\"\u4e25\u91cd\u8179\u6cfb\", \"\u9891\u7e41\u8179\u6cfb\", \"\u6c34\u6837\u4fbf\", \"\u6025\u6027\u8179\u6cfb\"],\n                \"negative\": [\"\u65e0\u8179\u6cfb\", \"\u5426\u8ba4\u8179\u6cfb\", \"\u672a\u89c1\u8179\u6cfb\"]\n            },\n            \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\": {\n                \"positive\": [\"\u4e25\u91cd\u4fbf\u79d8\", \"\u6392\u4fbf\u56f0\u96be\", \"\u6570\u65e5\u672a\u6392\u4fbf\", \"\u5927\u4fbf\u5e72\u7ed3\"],\n                \"negative\": [\"\u65e0\u4fbf\u79d8\", \"\u5426\u8ba4\u4fbf\u79d8\", \"\u672a\u89c1\u4fbf\u79d8\"]\n            },\n            \"\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\": [\"\u8f7b\u5ea6\", \"\u4e2d\u5ea6\", \"\u91cd\u5ea6\", \"\u8f7b\u5fae\", \"\u5267\u70c8\", \"\u9891\u7e41\u53d1\u4f5c\", \"\u5076\u53d1\"]\n        }\n\n        # \u5355\u4f4d\u8f6c\u6362\u6620\u5c04\u8868\uff08\u5f53\u524d\u4efb\u52a1\u6682\u672a\u6d89\u53ca\u5355\u4f4d\u6362\u7b97\uff0c\u4f46\u4fdd\u7559\u7ed3\u6784\u4ee5\u4fbf\u62d3\u5c55\uff09\n        self.unit_convert_map = {}\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u4e25\u91cd\u8179\u6cfb\u6216\u4fbf\u79d8\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"has_severe_diarrhea\": None,  # True/False/None\n            \"has_severe_constipation\": None,  # True/False/None\n            \"severity\": None  # \u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\u903b\u8f91\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n\n        # \u5982\u679c\u5b58\u5728\u5426\u5b9a\uff0c\u5219\u6240\u6709\u5b57\u6bb5\u9ed8\u8ba4\u4e3aFalse\u6216None\uff08\u6839\u636e\u5b57\u6bb5\u8bed\u4e49\uff09\n        if has_explicit_negative or has_context_negative:\n            result[\"has_severe_diarrhea\"] = False\n            result[\"has_severe_constipation\"] = False\n            return result\n\n        # 3. \u5b57\u6bb5\u63d0\u53d6\n        # \u63d0\u53d6\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\n        pos_diarrhea = self.field_extraction_keywords[\"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\"][\"positive\"]\n        neg_diarrhea = self.field_extraction_keywords[\"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\"][\"negative\"]\n        if any(keyword in text for keyword in neg_diarrhea):\n            result[\"has_severe_diarrhea\"] = False\n        elif any(keyword in text for keyword in pos_diarrhea):\n            result[\"has_severe_diarrhea\"] = True\n\n        # \u63d0\u53d6\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\n        pos_constipation = self.field_extraction_keywords[\"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\"][\"positive\"]\n        neg_constipation = self.field_extraction_keywords[\"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\"][\"negative\"]\n        if any(keyword in text for keyword in neg_constipation):\n            result[\"has_severe_constipation\"] = False\n        elif any(keyword in text for keyword in pos_constipation):\n            result[\"has_severe_constipation\"] = True\n\n        # \u63d0\u53d6\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\n        severity_keywords = self.field_extraction_keywords[\"\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\"]\n        for severity in severity_keywords:\n            if severity in text:\n                result[\"severity\"] = severity\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u75c7\u72b6\u89c2\u5bdfProfile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\u201d\u7ec4\u4ef6\n        if clinical_info[\"has_severe_diarrhea\"] is not None:\n            diarrhea_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"symptomtype-cs\", \"component-cs\"),\n                            \"code\": \"severe-diarrhea\",\n                            \"display\": \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\"\n                        }\n                    ],\n                    \"text\": \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u8179\u6cfb\"\n                },\n                \"valueBoolean\": clinical_info[\"has_severe_diarrhea\"]\n            }\n            observation[\"component\"].append(diarrhea_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\u201d\u7ec4\u4ef6\n        if clinical_info[\"has_severe_constipation\"] is not None:\n            constipation_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"symptomtype-cs\", \"component-cs\"),\n                            \"code\": \"severe-constipation\",\n                            \"display\": \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\"\n                        }\n                    ],\n                    \"text\": \"\u662f\u5426\u5b58\u5728\u4e25\u91cd\u4fbf\u79d8\"\n                },\n                \"valueBoolean\": clinical_info[\"has_severe_constipation\"]\n            }\n            observation[\"component\"].append(constipation_comp)\n\n        # \u6dfb\u52a0\u201c\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        if clinical_info[\"severity\"] is not None:\n            severity_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"symptomtype-cs\", \"component-cs\"),\n                            \"code\": \"symptom-severity\",\n                            \"display\": \"\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\"\n                        }\n                    ],\n                    \"text\": \"\u75c7\u72b6\u4e25\u91cd\u7a0b\u5ea6\"\n                },\n                \"valueCodeableConcept\": {\n                    \"coding\": [\n                        {\n                            \"system\": \"http://localhost:3456/api/terminology/CodeSystem/symptom-severity-cs\",\n                            \"code\": clinical_info[\"severity\"],\n                            \"display\": clinical_info[\"severity\"]\n                        }\n                    ],\n                    \"text\": clinical_info[\"severity\"]\n                }\n            }\n            observation[\"component\"].append(severity_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u4e25\u91cd\u8179\u6cfb\u6216\u4fbf\u79d8Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u4e25\u91cd\u8179\u6cfb\u6216\u4fbf\u79d8\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08\u6240\u6709\u5b57\u6bb5\u90fd\u4e3aNone\u65f6\u8868\u793a\u65e0\u6548\uff09\n            if all(v is None for v in clinical_info.values()):\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s30537", "deepquery_id": "9cb4a792828111f081b94c5f7088cb2a", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk555-SurgeryHistoryProfile\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk555-SurgeryProcedureCS\"\n        self.main_code = \"surgery\"\n        self.main_code_display = \"\u624b\u672f\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"\u6709\u65e0\u624b\u672f\u53f2\": {\"display\": \"\u6709\u65e0\u624b\u672f\u53f2\", \"value_type\": \"CodeableConcept\"},\n            \"\u624b\u672f\u65f6\u95f4\": {\"display\": \"\u624b\u672f\u65f6\u95f4\", \"value_type\": \"dateTime\"},\n            \"\u624b\u672f\u7c7b\u578b\": {\"display\": \"\u624b\u672f\u7c7b\u578b\", \"value_type\": \"CodeableConcept\"},\n            \"\u672f\u540e\u6062\u590d\u60c5\u51b5\": {\"display\": \"\u672f\u540e\u6062\u590d\u60c5\u51b5\", \"value_type\": \"CodeableConcept\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u624b\u672f\", \"\u672f\u5f0f\", \"\u672f\u524d\", \"\u672f\u540e\", \"\u672f\u4e2d\", \"\u5f00\u5200\", \"\u5207\u9664\", \"\u7f1d\u5408\", \"\u9ebb\u9189\", \"\u672f\u53f2\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u62d2\u7edd\", \"\u6212\", \"\u4ece\u4e0d\", \"\u672a\u66fe\", \"\u672a\u89c1\", \"\u672a\u8ff0\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\"\u65e0\u624b\u672f\u53f2\", \"\u5426\u8ba4\u624b\u672f\u53f2\", \"\u672a\u884c\u624b\u672f\", \"\u65e0\u660e\u663e\u624b\u672f\u53f2\", \"\u62d2\u7edd\u624b\u672f\", \"\u672a\u66fe\u63a5\u53d7\u624b\u672f\", \"\u672a\u89c1\u624b\u672f\u8bb0\u5f55\", \"\u672a\u8ff0\u624b\u672f\u53f2\"]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u7684\u5177\u4f53\u89c4\u5219\u6620\u5c04\n        self.extraction_field_rules = {\n            \"\u6709\u65e0\u624b\u672f\u53f2\": {\n                \"positive_keywords\": [\"\u6709\u624b\u672f\u53f2\", \"\u66fe\u884c\u624b\u672f\", \"\u884c\u624b\u672f\u6cbb\u7597\", \"\u63a5\u53d7\u624b\u672f\", \"\u672f\u53f2\u660e\u786e\"],\n                \"negative_keywords\": [\"\u65e0\u624b\u672f\u53f2\", \"\u5426\u8ba4\u624b\u672f\", \"\u672a\u884c\u624b\u672f\", \"\u65e0\u660e\u663e\u624b\u672f\u53f2\"]\n            },\n            \"\u624b\u672f\u65f6\u95f4\": {\n                \"patterns\": [\n                    r'(\\d{4})\u5e74(\\d{1,2})\u6708(\\d{1,2})\u65e5\u624b\u672f',\n                    r'\u4e8e(\\d{4})\u5e74\u624b\u672f',\n                    r'\u672f\u540e(\\d+)\u5e74',\n                    r'(\\d+)\u5e74\u524d\u884c\u624b\u672f',\n                    r'\u624b\u672f\u65f6\u95f4\uff1a(\\d{4}-\\d{2}-\\d{2})'\n                ]\n            },\n            \"\u624b\u672f\u7c7b\u578b\": {\n                \"keywords\": [\n                    \"\u9611\u5c3e\u5207\u9664\u672f\", \"\u80c6\u56ca\u5207\u9664\u672f\", \"\u5256\u5bab\u4ea7\u672f\", \"\u5fc3\u810f\u642d\u6865\u672f\", \"\u819d\u5173\u8282\u7f6e\u6362\u672f\",\n                    \"\u767d\u5185\u969c\u6458\u9664\u672f\", \"\u80c3\u5927\u90e8\u5207\u9664\u672f\", \"\u7532\u72b6\u817a\u5207\u9664\u672f\", \"\u80ba\u53f6\u5207\u9664\u672f\", \"\u51a0\u72b6\u52a8\u8109\u9020\u5f71\u672f\"\n                ]\n            },\n            \"\u672f\u540e\u6062\u590d\u60c5\u51b5\": {\n                \"keywords\": [\n                    \"\u6062\u590d\u826f\u597d\", \"\u6062\u590d\u53ef\", \"\u6062\u590d\u6b20\u4f73\", \"\u6062\u590d\u4e00\u822c\", \"\u5207\u53e3\u6108\u5408\u826f\u597d\",\n                    \"\u65e0\u5e76\u53d1\u75c7\", \"\u51fa\u73b0\u611f\u67d3\", \"\u672f\u540e\u75bc\u75db\u7f13\u89e3\", \"\u529f\u80fd\u6062\u590d\u6ee1\u610f\", \"\u751f\u6d3b\u81ea\u7406\"\n                ]\n            }\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u624b\u672f\u53f2\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"has_history\": None,      # True/False/None\n            \"surgery_date\": None,     # \u624b\u672f\u65f6\u95f4\n            \"surgery_type\": None,     # \u624b\u672f\u7c7b\u578b\n            \"recovery_status\": None   # \u672f\u540e\u6062\u590d\u60c5\u51b5\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"has_history\"] = False\n            return result\n\n        # 3. \u63d0\u53d6\u5b57\u6bb5\u4fe1\u606f\n        result[\"has_history\"] = True\n\n        # \u63d0\u53d6\u201c\u6709\u65e0\u624b\u672f\u53f2\u201d\u5b57\u6bb5\uff08\u8f85\u52a9\u786e\u8ba4\uff09\n        positive_keywords = self.extraction_field_rules[\"\u6709\u65e0\u624b\u672f\u53f2\"][\"positive_keywords\"]\n        negative_keywords = self.extraction_field_rules[\"\u6709\u65e0\u624b\u672f\u53f2\"][\"negative_keywords\"]\n        if any(kw in text for kw in positive_keywords):\n            result[\"has_history\"] = True\n        elif any(kw in text for kw in negative_keywords):\n            result[\"has_history\"] = False\n            return result  # \u82e5\u660e\u786e\u4e3aFalse\uff0c\u76f4\u63a5\u8fd4\u56de\n\n        # \u63d0\u53d6\u201c\u624b\u672f\u65f6\u95f4\u201d\n        for pattern in self.extraction_field_rules[\"\u624b\u672f\u65f6\u95f4\"][\"patterns\"]:\n            match = re.search(pattern, text)\n            if match:\n                if \"\u624b\u672f\u65f6\u95f4\uff1a\" in pattern:\n                    result[\"surgery_date\"] = match.group(1)\n                elif \"\u5e74\u524d\u884c\u624b\u672f\" in pattern or \"\u672f\u540e\" in pattern:\n                    year_offset = int(match.group(1))\n                    from datetime import datetime\n                    base_year = datetime.now().year\n                    result[\"surgery_date\"] = str(base_year - year_offset)\n                elif \"\u4e8e\" in pattern and \"\u5e74\u624b\u672f\" in pattern:\n                    result[\"surgery_date\"] = match.group(1) + \"-01-01\"\n                else:\n                    year, month, day = match.groups()\n                    result[\"surgery_date\"] = f\"{year}-{month.zfill(2)}-{day.zfill(2)}\"\n                break\n\n        # \u63d0\u53d6\u201c\u624b\u672f\u7c7b\u578b\u201d\n        surgery_types = self.extraction_field_rules[\"\u624b\u672f\u7c7b\u578b\"][\"keywords\"]\n        for s_type in surgery_types:\n            if s_type in text:\n                result[\"surgery_type\"] = s_type\n                break\n\n        # \u63d0\u53d6\u201c\u672f\u540e\u6062\u590d\u60c5\u51b5\u201d\n        recovery_keywords = self.extraction_field_rules[\"\u672f\u540e\u6062\u590d\u60c5\u51b5\"][\"keywords\"]\n        for status in recovery_keywords:\n            if status in text:\n                result[\"recovery_status\"] = status\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u624b\u672f\u53f2Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u6709\u65e0\u624b\u672f\u53f2\u201d\u7ec4\u4ef6\n        has_history_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"SurgeryProcedureCS\", \"component-cs\"),\n                        \"code\": \"has-surgery-history\",\n                        \"display\": self.component_code_map[\"\u6709\u65e0\u624b\u672f\u53f2\"][\"display\"]\n                    }\n                ],\n                \"text\": self.component_code_map[\"\u6709\u65e0\u624b\u672f\u53f2\"][\"display\"]\n            }\n        }\n        if clinical_info[\"has_history\"] is False:\n            has_history_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('SurgeryProcedureCS', 'surgery-history-status-cs')}\", \"code\": \"no-history\", \"display\": \"\u65e0\u624b\u672f\u53f2\"}],\n                \"text\": \"\u65e0\u624b\u672f\u53f2\"\n            }\n        elif clinical_info[\"has_history\"] is True:\n            has_history_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [{\"system\": f\"{self.main_code_system.replace('SurgeryProcedureCS', 'surgery-history-status-cs')}\", \"code\": \"yes-history\", \"display\": \"\u6709\u624b\u672f\u53f2\"}],\n                \"text\": \"\u6709\u624b\u672f\u53f2\"\n            }\n        observation[\"component\"].append(has_history_comp)\n\n        # \u6709\u624b\u672f\u53f2\u65f6\u6dfb\u52a0\u5176\u4ed6\u7ec4\u4ef6\n        if clinical_info[\"has_history\"] is True:\n            # \u6dfb\u52a0\u201c\u624b\u672f\u65f6\u95f4\u201d\u7ec4\u4ef6\n            if clinical_info[\"surgery_date\"] is not None:\n                surgery_date_comp = {\n                    \"code\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system.replace(\"SurgeryProcedureCS\", \"component-cs\"),\n                                \"code\": \"surgery-date\",\n                                \"display\": self.component_code_map[\"\u624b\u672f\u65f6\u95f4\"][\"display\"]\n                            }\n                        ],\n                        \"text\": self.component_code_map[\"\u624b\u672f\u65f6\u95f4\"][\"display\"]\n                    },\n                    \"valueDateTime\": clinical_info[\"surgery_date\"]\n                }\n                observation[\"component\"].append(surgery_date_comp)\n\n            # \u6dfb\u52a0\u201c\u624b\u672f\u7c7b\u578b\u201d\u7ec4\u4ef6\n            if clinical_info[\"surgery_type\"] is not None:\n                surgery_type_comp = {\n                    \"code\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system.replace(\"SurgeryProcedureCS\", \"component-cs\"),\n                                \"code\": \"surgery-type\",\n                                \"display\": self.component_code_map[\"\u624b\u672f\u7c7b\u578b\"][\"display\"]\n                            }\n                        ],\n                        \"text\": self.component_code_map[\"\u624b\u672f\u7c7b\u578b\"][\"display\"]\n                    },\n                    \"valueCodeableConcept\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system,\n                                \"code\": \"surgery-type\",\n                                \"display\": clinical_info[\"surgery_type\"]\n                            }\n                        ],\n                        \"text\": clinical_info[\"surgery_type\"]\n                    }\n                }\n                observation[\"component\"].append(surgery_type_comp)\n\n            # \u6dfb\u52a0\u201c\u672f\u540e\u6062\u590d\u60c5\u51b5\u201d\u7ec4\u4ef6\n            if clinical_info[\"recovery_status\"] is not None:\n                recovery_comp = {\n                    \"code\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system.replace(\"SurgeryProcedureCS\", \"component-cs\"),\n                                \"code\": \"recovery-status\",\n                                \"display\": self.component_code_map[\"\u672f\u540e\u6062\u590d\u60c5\u51b5\"][\"display\"]\n                            }\n                        ],\n                        \"text\": self.component_code_map[\"\u672f\u540e\u6062\u590d\u60c5\u51b5\"][\"display\"]\n                    },\n                    \"valueCodeableConcept\": {\n                        \"coding\": [\n                            {\n                                \"system\": self.main_code_system,\n                                \"code\": \"recovery-status\",\n                                \"display\": clinical_info[\"recovery_status\"]\n                            }\n                        ],\n                        \"text\": clinical_info[\"recovery_status\"]\n                    }\n                }\n                observation[\"component\"].append(recovery_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u624b\u672f\u53f2Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u624b\u672f\u53f2\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08has_history\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"has_history\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s15676", "deepquery_id": "d336c96c778811f08ae14c5f7088cb2d", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\u7528\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk185-chemotherapy-administration\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/cnwqk185-custom-cs\"\n        self.main_code = \"cnwqk185-drug-irinotecan\"\n        self.main_code_display = \"\u4f0a\u7acb\u66ff\u5eb7\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"cnwqk185-application-first\": {\"display\": \"\u9996\u6b21\u5e94\u7528\", \"value_type\": \"code\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u4f0a\u7acb\u66ff\u5eb7\", \"\u5316\u7597\", \"Irinotecan\", \"\u836f\u7269\u6cbb\u7597\", \"\u6297\u764c\u836f\", \"\u9759\u8109\u7528\u836f\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u62d2\u7edd\", \"\u6212\", \"\u7981\", \"\u505c\u7528\", \"\u4e2d\u65ad\", \"\u4e0d\u8010\u53d7\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\n            \"\u672a\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u5426\u8ba4\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u65e0\u4f0a\u7acb\u66ff\u5eb7\u4f7f\u7528\u53f2\",\n            \"\u62d2\u7edd\u4f0a\u7acb\u66ff\u5eb7\u6cbb\u7597\", \"\u505c\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u4f0a\u7acb\u66ff\u5eb7\u4e0d\u8010\u53d7\",\n            \"\u975e\u9996\u6b21\u5e94\u7528\", \"\u591a\u6b21\u5e94\u7528\u4f0a\u7acb\u66ff\u5eb7\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\uff08\u7528\u4e8e\u65f6\u95f4\u3001\u5242\u91cf\u7b49\u5b57\u6bb5\u63d0\u53d6\uff09\n        self.regex_patterns = {\n            \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\": [\n                r'(\u5316\u7597\u5f00\u59cb\u65f6\u95f4|\u6cbb\u7597\u5f00\u59cb\u65f6\u95f4|\u5f00\u59cb\u7528\u836f\u65f6\u95f4)[:\uff1a]?\\s*(\\d{4}[-\u5e74/](\\d{1,2}[-\u6708/])?\\d{1,2}\u65e5?)',\n                r'(\\d{4}[-\u5e74/](\\d{1,2}[-\u6708/])?\\d{1,2}\u65e5?)\u5f00\u59cb\u5316\u7597',\n                r'(\u4e8e|\u5728)(\\d{4}[-\u5e74/](\\d{1,2}[-\u6708/])?\\d{1,2}\u65e5?)\u7ed9\u4e88\u4f0a\u7acb\u66ff\u5eb7'\n            ],\n            \"\u7ed9\u836f\u5242\u91cf\": [\n                r'\u4f0a\u7acb\u66ff\u5eb7[\\s\\S]{0,10}(\\d+(\\.\\d+)?)\\s*(mg/m2|mg/kg|mg|\u6beb\u5347|ml)',\n                r'\u5242\u91cf[:\uff1a]?\\s*(\\d+(\\.\\d+)?)\\s*(mg/m2|mg/kg|mg|\u6beb\u5347|ml)',\n                r'\u7ed9\u4e88\u4f0a\u7acb\u66ff\u5eb7[\\s\\S]{0,10}(\\d+(\\.\\d+)?)\\s*(mg/m2|mg/kg|mg|\u6beb\u5347|ml)'\n            ]\n        }\n\n        # \u5173\u952e\u8bcd\u5339\u914d\u89c4\u5219\uff08\u7528\u4e8e\u5e03\u5c14\u578b\u5b57\u6bb5\u548c\u8bf4\u660e\u7c7b\u5b57\u6bb5\uff09\n        self.keyword_rules = {\n            \"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\": {\n                \"positive\": [\"\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u4f0a\u7acb\u66ff\u5eb7\u5316\u7597\", \"\u7ed9\u4e88\u4f0a\u7acb\u66ff\u5eb7\", \"\u5e94\u7528\u4f0a\u7acb\u66ff\u5eb7\"],\n                \"negative\": [\"\u672a\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u5426\u8ba4\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\", \"\u65e0\u4f0a\u7acb\u66ff\u5eb7\u4f7f\u7528\u53f2\"]\n            },\n            \"\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\": {\n                \"positive\": [\"\u9996\u6b21\u5e94\u7528\", \"\u521d\u6b21\u4f7f\u7528\", \"\u7b2c\u4e00\u5468\u671f\", \"\u9996\u5242\"],\n                \"negative\": [\"\u975e\u9996\u6b21\", \"\u91cd\u590d\u5e94\u7528\", \"\u518d\u6b21\u4f7f\u7528\", \"\u591a\u5468\u671f\u6cbb\u7597\"]\n            },\n            \"\u7ed9\u836f\u8bf4\u660e\": [\n                \"\u9759\u8109\u6ef4\u6ce8\", \"\u7f13\u6162\u63a8\u6ce8\", \"\u5206\u6b21\u7ed9\u836f\", \"\u8054\u5408\u7528\u836f\",\n                \"\u5355\u836f\u6cbb\u7597\", \"\u7a00\u91ca\u540e\u4f7f\u7528\", \"\u907f\u5149\u8f93\u6ce8\", \"\u7597\u7a0b\u5468\u671f\"\n            ]\n        }\n\n        # 3. \u5355\u4f4d\u8f6c\u6362\u6620\u5c04\uff08\u82e5\u540e\u7eed\u6d89\u53ca\u5242\u91cf\u5355\u4f4d\u7edf\u4e00\u53ef\u542f\u7528\uff09\n        self.unit_convert_map = {\n            \"mg\": 1.0,\n            \"mg/m2\": 1.0,\n            \"mg/kg\": 1.0,\n            \"\u6beb\u5347\": 1.0,\n            \"ml\": 1.0\n        }\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u4f0a\u7acb\u66ff\u5eb7\u5316\u7597\u65b9\u6848\u9996\u6b21\u5e94\u7528\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"used_irinotecan\": None,      # \u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\uff08True/False/None\uff09\n            \"is_first_application\": None, # \u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\uff08True/False/None\uff09\n            \"start_time\": None,           # \u5316\u7597\u5f00\u59cb\u65f6\u95f4\uff08\u5b57\u7b26\u4e32\uff09\n            \"dosage\": None,               # \u7ed9\u836f\u5242\u91cf\u6570\u503c\uff08\u6d6e\u70b9\u6570\uff09\n            \"dosage_unit\": None,          # \u7ed9\u836f\u5242\u91cf\u5355\u4f4d\uff08\u5b57\u7b26\u4e32\uff09\n            \"administration_note\": None   # \u7ed9\u836f\u8bf4\u660e\uff08\u5b57\u7b26\u4e32\uff09\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\u903b\u8f91\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n\n        # \u5982\u679c\u5b58\u5728\u5426\u5b9a\u60c5\u51b5\uff0c\u5219\u76f4\u63a5\u6807\u8bb0\u672a\u4f7f\u7528\u6216\u975e\u9996\u6b21\uff0c\u5e76\u8fd4\u56de\n        if has_explicit_negative or has_context_negative:\n            # \u5224\u65ad\u662f\u54ea\u4e2a\u5b57\u6bb5\u88ab\u5426\u5b9a\u4e86\n            if any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\"][\"negative\"]):\n                result[\"used_irinotecan\"] = False\n            else:\n                result[\"used_irinotecan\"] = True  # \u9ed8\u8ba4\u8ba4\u4e3a\u63d0\u5230\u836f\u7269\u5373\u4e3a\u4f7f\u7528\uff0c\u9664\u975e\u660e\u786e\u5426\u5b9a\n\n            if any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\"][\"negative\"]):\n                result[\"is_first_application\"] = False\n            else:\n                result[\"is_first_application\"] = True  # \u9ed8\u8ba4\u8ba4\u4e3a\u9996\u6b21\uff0c\u9664\u975e\u660e\u786e\u5426\u5b9a\n\n            return result\n\n        # 3. \u5b57\u6bb5\u62bd\u53d6\u90e8\u5206\n        # \u62bd\u53d6\u201c\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\u201d\n        if any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\"][\"positive\"]):\n            result[\"used_irinotecan\"] = True\n        elif any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\"][\"negative\"]):\n            result[\"used_irinotecan\"] = False\n        else:\n            result[\"used_irinotecan\"] = None\n\n        # \u62bd\u53d6\u201c\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\u201d\n        if any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\"][\"positive\"]):\n            result[\"is_first_application\"] = True\n        elif any(kw in text for kw in self.keyword_rules[\"\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\"][\"negative\"]):\n            result[\"is_first_application\"] = False\n        else:\n            result[\"is_first_application\"] = None\n\n        # \u62bd\u53d6\u201c\u5316\u7597\u5f00\u59cb\u65f6\u95f4\u201d\n        for pattern in self.regex_patterns[\"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"start_time\"] = match.group(2).strip()\n                break\n\n        # \u62bd\u53d6\u201c\u7ed9\u836f\u5242\u91cf\u201d\n        for pattern in self.regex_patterns[\"\u7ed9\u836f\u5242\u91cf\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"dosage\"] = float(match.group(1))\n                result[\"dosage_unit\"] = match.group(3).strip()\n                break\n\n        # \u62bd\u53d6\u201c\u7ed9\u836f\u8bf4\u660e\u201d\n        for note_kw in self.keyword_rules[\"\u7ed9\u836f\u8bf4\u660e\"]:\n            if note_kw in text:\n                result[\"administration_note\"] = note_kw\n                break\n\n        return result\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u4f0a\u7acb\u66ff\u5eb7\u5316\u7597\u65b9\u6848\u9996\u6b21\u5e94\u7528Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\u201d\u7ec4\u4ef6\n        used_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"component-cs\"),\n                        \"code\": \"used-irinotecan\",\n                        \"display\": \"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u4f7f\u7528\u4f0a\u7acb\u66ff\u5eb7\"\n            }\n        }\n        if clinical_info[\"used_irinotecan\"] is True:\n            used_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"yes-no-cs\"),\n                        \"code\": \"yes\",\n                        \"display\": \"\u662f\"\n                    }\n                ],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"used_irinotecan\"] is False:\n            used_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"yes-no-cs\"),\n                        \"code\": \"no\",\n                        \"display\": \"\u5426\"\n                    }\n                ],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(used_comp)\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u4e3a\u9996\u6b21\u5e94\u7528\u201d\u7ec4\u4ef6\n        first_app_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"component-cs\"),\n                        \"code\": \"cnwqk185-application-first\",\n                        \"display\": self.component_code_map[\"cnwqk185-application-first\"][\"display\"]\n                    }\n                ],\n                \"text\": self.component_code_map[\"cnwqk185-application-first\"][\"display\"]\n            }\n        }\n        if clinical_info[\"is_first_application\"] is True:\n            first_app_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"yes-no-cs\"),\n                        \"code\": \"yes\",\n                        \"display\": \"\u662f\"\n                    }\n                ],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"is_first_application\"] is False:\n            first_app_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"custom-cs\", \"yes-no-cs\"),\n                        \"code\": \"no\",\n                        \"display\": \"\u5426\"\n                    }\n                ],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(first_app_comp)\n\n        # \u6dfb\u52a0\u201c\u5316\u7597\u5f00\u59cb\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08DateTime\u7c7b\u578b\uff09\n        if clinical_info[\"start_time\"]:\n            start_time_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"custom-cs\", \"component-cs\"),\n                            \"code\": \"chemotherapy-start-time\",\n                            \"display\": \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"start_time\"]\n            }\n            observation[\"component\"].append(start_time_comp)\n\n        # \u6dfb\u52a0\u201c\u7ed9\u836f\u5242\u91cf\u201d\u7ec4\u4ef6\uff08Quantity\u7c7b\u578b\uff09\n        if clinical_info[\"dosage\"] is not None and clinical_info[\"dosage_unit\"]:\n            dosage_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"custom-cs\", \"component-cs\"),\n                            \"code\": \"drug-dosage\",\n                            \"display\": \"\u7ed9\u836f\u5242\u91cf\"\n                        }\n                    ],\n                    \"text\": \"\u7ed9\u836f\u5242\u91cf\"\n                },\n                \"valueQuantity\": {\n                    \"value\": clinical_info[\"dosage\"],\n                    \"unit\": clinical_info[\"dosage_unit\"],\n                    \"system\": \"http://unitsofmeasure.org\",\n                    \"code\": clinical_info[\"dosage_unit\"]\n                }\n            }\n            observation[\"component\"].append(dosage_comp)\n\n        # \u6dfb\u52a0\u201c\u7ed9\u836f\u8bf4\u660e\u201d\u7ec4\u4ef6\uff08String\u7c7b\u578b\uff09\n        if clinical_info[\"administration_note\"]:\n            note_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"custom-cs\", \"component-cs\"),\n                            \"code\": \"administration-note\",\n                            \"display\": \"\u7ed9\u836f\u8bf4\u660e\"\n                        }\n                    ],\n                    \"text\": \"\u7ed9\u836f\u8bf4\u660e\"\n                },\n                \"valueString\": clinical_info[\"administration_note\"]\n            }\n            observation[\"component\"].append(note_comp)\n\n        return observation\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u4f0a\u7acb\u66ff\u5eb7\u5316\u7597\u65b9\u6848Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n\n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u4f0a\u7acb\u66ff\u5eb7\u76f8\u5173\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n\n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08used_irinotecan\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"used_irinotecan\") is None:\n                continue\n\n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n\n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
{"id": "s5116", "deepquery_id": "73669ef076d111f097374c5f7088cb2d", "code": "import re\nimport uuid\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\nclass FHIRResourceBundleGenerator:\n    def __init__(self, fhir_api_base: str):\n        self.fhir_api_base = fhir_api_base  # FHIR\u670d\u52a1\u5668\u57fa\u7840\u5730\u5740\uff08\u9884\u7559\u6269\u5c55\uff09\n\n        # 1. FHIR\u914d\u7f6e\u4fe1\u606f\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a11\uff09\n        self.fhir_observation_profile = \"http://localhost:3456/api/terminology/Profile/cnwqk165-chemotherapy-history\"\n        self.main_code_system = \"http://localhost:3456/api/terminology/CodeSystem/icd10\"\n        self.main_code = \"\u5316\u7597\u64cd\u4f5c\uff08ICD-10\u80bf\u7624\u7f16\u7801\u6216ICD-O-3\u5f62\u6001\u5b66\u7f16\u7801\uff09\"\n        self.main_code_display = \"\u5316\u7597\u6cbb\u7597\u64cd\u4f5c\"\n        # \u7ec4\u4ef6Code\u914d\u7f6e\uff08\u5bf9\u5e94\u5f85\u63d0\u53d6\u5b57\u6bb5\uff09\n        self.component_code_map = {\n            \"treatmentLocation\": {\"display\": \"\u6cbb\u7597\u5730\u70b9\u7c7b\u578b\", \"value_type\": \"code\"}\n        }\n\n        # 2. \u6587\u672c\u63d0\u53d6\u89c4\u5219\u521d\u59cb\u5316\uff08\u6765\u81ea\u5b50\u4efb\u52a12\uff09\n        self.core_keywords = [\"\u5316\u7597\", \"\u5316\u5b66\u6cbb\u7597\", \"\u5916\u9662\u6cbb\u7597\", \"\u9662\u5916\u5316\u7597\", \"\u5916\u6765\u5316\u7597\", \"\u4ed6\u9662\u5316\u7597\"]  # \u76f8\u5173\u6027\u5224\u65ad\u5173\u952e\u8bcd\n        self.negative_keywords = [\"\u65e0\", \"\u4e0d\", \"\u5426\u8ba4\", \"\u672a\", \"\u62d2\u7edd\", \"\u4ece\u672a\", \"\u672a\u66fe\", \"\u6ca1\u6709\"]  # \u5426\u5b9a\u5173\u952e\u8bcd\n        self.negative_patterns = [\n            \"\u65e0\u5916\u9662\u5316\u7597\u53f2\", \"\u5426\u8ba4\u5916\u9662\u5316\u7597\", \"\u672a\u884c\u5916\u9662\u5316\u7597\", \"\u672a\u66fe\u63a5\u53d7\u5316\u7597\",\n            \"\u62d2\u7edd\u5316\u7597\", \"\u65e0\u5916\u6765\u5316\u7597\u8bb0\u5f55\", \"\u5426\u8ba4\u4ed6\u9662\u5316\u7597\u53f2\", \"\u672a\u5728\u5916\u9662\u884c\u5316\u7597\"\n        ]  # \u56fa\u5b9a\u5426\u5b9a\u6a21\u5f0f\n\n        # \u63d0\u53d6\u5b57\u6bb5\u5217\u8868\uff08\u7528\u4e8e\u540e\u7eed\u65b9\u6cd5\u590d\u7528\uff09\n        self.extract_fields = [\n            \"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\", \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\", \"\u5316\u7597\u7ed3\u675f\u65f6\u95f4\", \"\u5316\u7597\u65b9\u6848\", \"\u6cbb\u7597\u533b\u9662\u540d\u79f0\"\n        ]\n\n        # \u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\uff08\u6309\u5b57\u6bb5\u7ec4\u7ec7\uff0c\u4f9b\u63d0\u53d6\u65b9\u6cd5\u8c03\u7528\uff09\n        self.regex_patterns = {\n            \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\": [\n                r'\u5316\u7597\u5f00\u59cb\u4e8e(\\d{4}[-./]\\d{1,2}[-./]\\d{1,2})',\n                r'(\\d{4}\u5e74\\d{1,2}\u6708\\d{1,2}\u65e5)\u5f00\u59cb\u5316\u7597',\n                r'\u4e8e(\\d{4}[-.]\\d{1,2}[-.]\\d{1,2})\u884c\u5316\u7597',\n                r'\u81ea(\\d{4}\u5e74\\d{1,2}\u6708)\u8d77\u5316\u7597'\n            ],\n            \"\u5316\u7597\u7ed3\u675f\u65f6\u95f4\": [\n                r'\u5316\u7597\u7ed3\u675f\u4e8e(\\d{4}[-./]\\d{1,2}[-./]\\d{1,2})',\n                r'(\\d{4}\u5e74\\d{1,2}\u6708\\d{1,2}\u65e5)\u7ed3\u675f\u5316\u7597',\n                r'\u5316\u7597\u6301\u7eed\u81f3(\\d{4}[-.]\\d{1,2}[-.]\\d{1,2})',\n                r'\u4e8e(\\d{4}[-.]\\d{1,2}[-.]\\d{1,2})\u505c\u6b62\u5316\u7597'\n            ],\n            \"\u6cbb\u7597\u533b\u9662\u540d\u79f0\": [\n                r'\u4e8e([\\u4e00-\\u9fa5]{2,10}(\u533b\u9662|\u533b\u79d1\u5927\u5b66\u9644\u5c5e\u533b\u9662|\u4e2d\u5fc3\u533b\u9662|\u4eba\u6c11\u533b\u9662))\u6cbb\u7597',\n                r'\u5728([\\u4e00-\\u9fa5]{2,10}(\u533b\u9662|\u533b\u79d1\u5927\u5b66\u9644\u5c5e\u533b\u9662|\u4e2d\u5fc3\u533b\u9662|\u4eba\u6c11\u533b\u9662))\u884c\u5316\u7597',\n                r'\u8f6c\u8bca\u81f3([\\u4e00-\\u9fa5]{2,10}(\u533b\u9662|\u533b\u79d1\u5927\u5b66\u9644\u5c5e\u533b\u9662|\u4e2d\u5fc3\u533b\u9662|\u4eba\u6c11\u533b\u9662))\u7ee7\u7eed\u6cbb\u7597'\n            ]\n        }\n\n        # \u5173\u952e\u8bcd\u5339\u914d\u89c4\u5219\n        self.keyword_rules = {\n            \"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\": {\n                \"positive\": [\"\u66fe\u884c\u5316\u7597\", \"\u63a5\u53d7\u5316\u7597\", \"\u8fdb\u884c\u5316\u7597\", \"\u5728\u5916\u9662\u5316\u7597\", \"\u4e8e\u5916\u9662\u884c\u5316\u7597\"],\n                \"negative\": [\"\u65e0\u5316\u7597\u53f2\", \"\u5426\u8ba4\u5316\u7597\", \"\u672a\u884c\u5316\u7597\", \"\u672a\u66fe\u5316\u7597\"]\n            },\n            \"\u5316\u7597\u65b9\u6848\": [\n                \"TP\u65b9\u6848\", \"TC\u65b9\u6848\", \"FOLFOX\u65b9\u6848\", \"XELOX\u65b9\u6848\", \"\u5409\u897f\u4ed6\u6ee8\u8054\u5408\u987a\u94c2\",\n                \"\u7d2b\u6749\u9187\u8054\u5408\u5361\u94c2\", \"\u591a\u897f\u4ed6\u8d5b\u8054\u5408\u987a\u94c2\", \"EC\u65b9\u6848\", \"AC\u65b9\u6848\", \"FEC\u65b9\u6848\",\n                \"CMF\u65b9\u6848\", \"\u66f2\u59a5\u73e0\u5355\u6297\u8054\u5408\u5316\u7597\"\n            ]\n        }\n\n\n    def _extract_clinical_info(self, text: str) -> Dict[str, Any]:\n        \"\"\"\u4ece\u75c5\u4f8b\u6587\u672c\u4e2d\u63d0\u53d6\u5916\u9662\u5316\u7597\u53f2\u76f8\u5173\u4fe1\u606f\"\"\"\n        result = {\n            \"has_chemotherapy\": None,     # \u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597 True/False/None\n            \"start_date\": None,           # \u5316\u7597\u5f00\u59cb\u65f6\u95f4\n            \"end_date\": None,             # \u5316\u7597\u7ed3\u675f\u65f6\u95f4\n            \"regimen\": None,              # \u5316\u7597\u65b9\u6848\n            \"hospital_name\": None         # \u6cbb\u7597\u533b\u9662\u540d\u79f0\n        }\n\n        # 1. \u76f8\u5173\u6027\u5224\u65ad\uff1a\u65e0\u6838\u5fc3\u5173\u952e\u8bcd\u5219\u8fd4\u56de\u7a7a\u7ed3\u679c\n        if not any(keyword in text for keyword in self.core_keywords):\n            return result\n\n        # 2. \u5426\u5b9a\u5224\u65ad\uff1a\u542b\u5426\u5b9a\u6a21\u5f0f\u6216\u4e0a\u4e0b\u6587\u5426\u5b9a\u5219\u6807\u8bb0\u4e3a\u65e0\u5916\u9662\u5316\u7597\u53f2\n        has_explicit_negative = any(re.search(pattern, text) for pattern in self.negative_patterns)\n        has_context_negative = False\n        for neg_word in self.negative_keywords:\n            # \u68c0\u67e5\u5426\u5b9a\u8bcd\u4e0e\u6838\u5fc3\u5173\u952e\u8bcd\u8ddd\u79bb\u22645\u5b57\u7b26\uff08\u907f\u514d\u8bef\u5224\uff09\n            neg_positions = [m.start() for m in re.finditer(neg_word, text)]\n            core_positions = [m.start() for m in re.finditer('|'.join(self.core_keywords), text)]\n            if any(abs(n - c) <= 5 for n in neg_positions for c in core_positions):\n                has_context_negative = True\n                break\n        if has_explicit_negative or has_context_negative:\n            result[\"has_chemotherapy\"] = False\n            return result\n\n        # 3. \u6709\u5916\u9662\u5316\u7597\u53f2\uff1a\u63d0\u53d6\u5404\u5b57\u6bb5\uff08\u6309\u5b50\u4efb\u52a12\u89c4\u5219\uff09\n\n        # \u63d0\u53d6\u201c\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\u201d\n        if any(keyword in text for keyword in self.keyword_rules[\"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\"][\"positive\"]):\n            result[\"has_chemotherapy\"] = True\n        elif any(keyword in text for keyword in self.keyword_rules[\"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\"][\"negative\"]):\n            result[\"has_chemotherapy\"] = False\n        else:\n            # \u9ed8\u8ba4\u4e3aTrue\uff08\u56e0\u4e3a\u5df2\u901a\u8fc7\u76f8\u5173\u6027\u548c\u5426\u5b9a\u5224\u65ad\uff09\n            result[\"has_chemotherapy\"] = True\n\n        # \u82e5\u5224\u5b9a\u4e3a\u65e0\u5316\u7597\u53f2\uff0c\u5219\u4e0d\u518d\u63d0\u53d6\u5176\u4ed6\u5b57\u6bb5\n        if result[\"has_chemotherapy\"] is False:\n            return result\n\n        # \u63d0\u53d6\u201c\u5316\u7597\u5f00\u59cb\u65f6\u95f4\u201d\n        for pattern in self.regex_patterns[\"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"start_date\"] = match.group(1)\n                break\n\n        # \u63d0\u53d6\u201c\u5316\u7597\u7ed3\u675f\u65f6\u95f4\u201d\n        for pattern in self.regex_patterns[\"\u5316\u7597\u7ed3\u675f\u65f6\u95f4\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"end_date\"] = match.group(1)\n                break\n\n        # \u63d0\u53d6\u201c\u6cbb\u7597\u533b\u9662\u540d\u79f0\u201d\n        for pattern in self.regex_patterns[\"\u6cbb\u7597\u533b\u9662\u540d\u79f0\"]:\n            match = re.search(pattern, text)\n            if match:\n                result[\"hospital_name\"] = match.group(1)\n                break\n\n        # \u63d0\u53d6\u201c\u5316\u7597\u65b9\u6848\u201d\n        regimen_keywords = self.keyword_rules[\"\u5316\u7597\u65b9\u6848\"]\n        for regimen in regimen_keywords:\n            if regimen in text:\n                result[\"regimen\"] = regimen\n                break\n\n        return result\n\n\n    def _create_observation(self, patient_id: str, text: str, timestamp: str, clinical_info: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\u521b\u5efa\u7b26\u5408\u5916\u9662\u5316\u7597\u53f2Profile\u7684Observation\u8d44\u6e90\"\"\"\n        observation_id = str(uuid.uuid1())\n        observation = {\n            \"resourceType\": \"Observation\",\n            \"id\": observation_id,\n            \"meta\": {\n                \"profile\": [self.fhir_observation_profile]  # \u590d\u7528__init__\u4e2d\u7684FHIR Profile\n            },\n            \"text\": {\n                \"status\": \"generated\",\n                \"div\": f\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\u75c5\u4f8b\u6587\u672c\u6458\u5f55\uff1a{text}</div>\"\n            },\n            \"status\": \"final\",\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system,\n                        \"code\": self.main_code,\n                        \"display\": self.main_code_display\n                    }\n                ],\n                \"text\": self.main_code_display\n            },\n            \"subject\": {\n                \"reference\": f\"Patient/{patient_id}\"\n            },\n            \"effectiveDateTime\": timestamp,\n            \"component\": []\n        }\n\n        # \u6dfb\u52a0\u201c\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\u201d\u7ec4\u4ef6\uff08CodeableConcept\uff09\n        has_history_comp = {\n            \"code\": {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                        \"code\": \"has-chemotherapy-history\",\n                        \"display\": \"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\"\n                    }\n                ],\n                \"text\": \"\u662f\u5426\u63a5\u53d7\u8fc7\u5916\u9662\u5316\u7597\"\n            }\n        }\n        if clinical_info[\"has_chemotherapy\"] is True:\n            has_history_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"icd10\", \"yes-no-cs\"),\n                        \"code\": \"yes\",\n                        \"display\": \"\u662f\"\n                    }\n                ],\n                \"text\": \"\u662f\"\n            }\n        elif clinical_info[\"has_chemotherapy\"] is False:\n            has_history_comp[\"valueCodeableConcept\"] = {\n                \"coding\": [\n                    {\n                        \"system\": self.main_code_system.replace(\"icd10\", \"yes-no-cs\"),\n                        \"code\": \"no\",\n                        \"display\": \"\u5426\"\n                    }\n                ],\n                \"text\": \"\u5426\"\n            }\n        observation[\"component\"].append(has_history_comp)\n\n        # \u6709\u5316\u7597\u53f2\u65f6\uff0c\u6dfb\u52a0\u201c\u5316\u7597\u5f00\u59cb\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08DateTime\uff09\n        if clinical_info[\"has_chemotherapy\"] is True and clinical_info[\"start_date\"] is not None:\n            start_date_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"chemotherapy-start-date\",\n                            \"display\": \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u5316\u7597\u5f00\u59cb\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"start_date\"]\n            }\n            observation[\"component\"].append(start_date_comp)\n\n        # \u6709\u5316\u7597\u53f2\u65f6\uff0c\u6dfb\u52a0\u201c\u5316\u7597\u7ed3\u675f\u65f6\u95f4\u201d\u7ec4\u4ef6\uff08DateTime\uff09\n        if clinical_info[\"has_chemotherapy\"] is True and clinical_info[\"end_date\"] is not None:\n            end_date_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"chemotherapy-end-date\",\n                            \"display\": \"\u5316\u7597\u7ed3\u675f\u65f6\u95f4\"\n                        }\n                    ],\n                    \"text\": \"\u5316\u7597\u7ed3\u675f\u65f6\u95f4\"\n                },\n                \"valueDateTime\": clinical_info[\"end_date\"]\n            }\n            observation[\"component\"].append(end_date_comp)\n\n        # \u6709\u5316\u7597\u53f2\u65f6\uff0c\u6dfb\u52a0\u201c\u5316\u7597\u65b9\u6848\u201d\u7ec4\u4ef6\uff08String\uff09\n        if clinical_info[\"has_chemotherapy\"] is True and clinical_info[\"regimen\"] is not None:\n            regimen_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"chemotherapy-regimen\",\n                            \"display\": \"\u5316\u7597\u65b9\u6848\"\n                        }\n                    ],\n                    \"text\": \"\u5316\u7597\u65b9\u6848\"\n                },\n                \"valueString\": clinical_info[\"regimen\"]\n            }\n            observation[\"component\"].append(regimen_comp)\n\n        # \u6709\u5316\u7597\u53f2\u65f6\uff0c\u6dfb\u52a0\u201c\u6cbb\u7597\u533b\u9662\u540d\u79f0\u201d\u7ec4\u4ef6\uff08String\uff09\n        if clinical_info[\"has_chemotherapy\"] is True and clinical_info[\"hospital_name\"] is not None:\n            hospital_comp = {\n                \"code\": {\n                    \"coding\": [\n                        {\n                            \"system\": self.main_code_system.replace(\"icd10\", \"component-cs\"),\n                            \"code\": \"treatment-hospital-name\",\n                            \"display\": \"\u6cbb\u7597\u533b\u9662\u540d\u79f0\"\n                        }\n                    ],\n                    \"text\": \"\u6cbb\u7597\u533b\u9662\u540d\u79f0\"\n                },\n                \"valueString\": clinical_info[\"hospital_name\"]\n            }\n            observation[\"component\"].append(hospital_comp)\n\n        return observation\n\n\n    def parse_clinical_text_to_fhir_bundle(self, patient_id: str, case_reports: List[Dict[str, str]], ai_algorithm_type: str = \"nlp\") -> Dict[str, Any]:\n        \"\"\"\n        \u4e3b\u65b9\u6cd5\uff1a\u4ece\u591a\u4efd\u75c5\u4f8b\u6587\u672c\u751f\u6210\u542b\u5916\u9662\u5316\u7597\u53f2Observation\u7684FHIR Bundle\n        :param patient_id: \u60a3\u8005ID\uff08\u5982\"pat-001\"\uff09\n        :param case_reports: \u75c5\u4f8b\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u542b\"text\"\uff08\u75c5\u4f8b\u6587\u672c\uff09\u548c\"timestamp\"\uff08\u65f6\u95f4\u6233\uff0c\u5982\"2024-10-01T10:00:00Z\"\uff09\n        :param ai_algorithm_type: \u63d0\u53d6\u7b97\u6cd5\u7c7b\u578b\uff0c\u9ed8\u8ba4nlp\n        :return: FHIR Bundle\uff08transaction\u7c7b\u578b\uff09\n        \"\"\"\n        # 1. \u521d\u59cb\u5316FHIR Bundle\u57fa\u7840\u7ed3\u6784\n        fhir_bundle = {\n            \"resourceType\": \"Bundle\",\n            \"type\": \"transaction\",  # \u6279\u91cf\u63d0\u4ea4\u7c7b\u578b\n            \"total\": 0,  # \u6709\u6548\u8d44\u6e90\u603b\u6570\uff0c\u540e\u7eed\u52a8\u6001\u66f4\u65b0\n            \"entry\": []  # \u8d44\u6e90\u5217\u8868\n        }\n\n        # 2. \u904d\u5386\u6bcf\u4e00\u4efd\u75c5\u4f8b\uff0c\u63d0\u53d6\u4fe1\u606f\u5e76\u751f\u6210Observation\n        for report in case_reports:\n            case_text = report.get(\"text\", \"\").strip()\n            case_timestamp = report.get(\"timestamp\", datetime.now().isoformat() + \"Z\")  # \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\n            \n            # 3. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u63d0\u53d6\u4e34\u5e8a\u4fe1\u606f\uff08\u5916\u9662\u5316\u7597\u53f2\uff09\n            clinical_info = self._extract_clinical_info(case_text)\n            \n            # 4. \u8df3\u8fc7\u65e0\u76f8\u5173\u4fe1\u606f\u7684\u75c5\u4f8b\uff08has_chemotherapy\u4e3aNone\u65f6\u65e0\u6709\u6548\u6570\u636e\uff09\n            if clinical_info.get(\"has_chemotherapy\") is None:\n                continue\n            \n            # 5. \u8c03\u7528\u8f85\u52a9\u65b9\u6cd5\u751f\u6210Observation\u8d44\u6e90\n            observation_resource = self._create_observation(\n                patient_id=patient_id,\n                text=case_text,\n                timestamp=case_timestamp,\n                clinical_info=clinical_info\n            )\n            \n            # 6. \u5c06Observation\u52a0\u5165Bundle\u7684entry\uff0c\u914d\u7f6ePOST\u8bf7\u6c42\n            fhir_bundle[\"entry\"].append({\n                \"resource\": observation_resource,\n                \"request\": {\n                    \"method\": \"POST\",  # FHIR\u6279\u91cf\u63d0\u4ea4\u5e38\u7528\u65b9\u6cd5\n                    \"url\": \"Observation\"  # \u8d44\u6e90\u7c7b\u578b\uff0c\u4e0eObservation\u5bf9\u5e94\n                }\n            })\n\n        # 7. \u66f4\u65b0Bundle\u7684\u6709\u6548\u8d44\u6e90\u603b\u6570\n        fhir_bundle[\"total\"] = len(fhir_bundle[\"entry\"])\n\n        return fhir_bundle"}
