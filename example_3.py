
import json
import base64
import uuid


def base64_encode(original_str):
    # 1. 字符串转字节（utf-8编码）
    str_bytes = original_str.encode("utf-8")

    # 2. base64编码（得到字节结果）
    encoded_bytes = base64.standard_b64encode(str_bytes)

    # 3. （可选）字节转字符串（得到最终的base64编码字符串）
    encoded_str = encoded_bytes.decode("utf-8")

    return encoded_str

# 读取JSONL文件，还原code
def read_code_from_jsonl(file_path: str) -> list:
    result_list = []
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            # 关键：json.loads会自动处理转义符，还原双引号
            data = json.loads(line.strip())
            # 提取并存储id、deepquery_id、code
            result_list.append({
                "id": data["id"],
                "deepquery_id": data["deepquery_id"],
                "code": data["code"]  # 此处code已无转义符，可直接使用
            })
    return result_list


# for i in range(18):
#     print(uuid.uuid4())

# content = ""
# print(base64.b64decode(content).decode("utf-8"))
